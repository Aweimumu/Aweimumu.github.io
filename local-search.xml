<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/02/SpringBoot%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/05/02/SpringBoot%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot的源码学习篇"><a href="#SpringBoot的源码学习篇" class="headerlink" title="SpringBoot的源码学习篇"></a>SpringBoot的源码学习篇</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/02/SpringMVC/"/>
    <url>/2023/05/02/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、SpringMVC概述"><a href="#一、SpringMVC概述" class="headerlink" title="一、SpringMVC概述"></a>一、SpringMVC概述</h2><blockquote><p>Spring MVC 是由Spring官方提供的基于MVC设计理念的web框架。</p><p>SpringMVC是基于Servlet封装的用于实现MVC控制的框架，实现前端和服务端的交互。</p></blockquote><h4 id="1-1-SpringMVC优势"><a href="#1-1-SpringMVC优势" class="headerlink" title="1.1 SpringMVC优势"></a>1.1 SpringMVC优势</h4><ul><li><p>严格遵守了MVC分层思想</p></li><li><p>采用了松耦合、插件式结构；相比较于我们封装的BaseServlet以及其他的一些MVC框架来说更灵活、更具扩展性</p></li><li><p>SpringMVC是基于Spring的扩展、提供了一套完善的MVC注解</p></li><li><p>SpringMVC在数据绑定、视图解析都提供了多种处理方式，可灵活配置</p></li><li><p>SpringMVC对RESTful URL设计方法提供了良好的支持</p></li></ul><h4 id="1-2-SpringMVC本质工作"><a href="#1-2-SpringMVC本质工作" class="headerlink" title="1.2 SpringMVC本质工作"></a>1.2 SpringMVC本质工作</h4><ul><li>接收并解析请求</li><li>处理请求</li><li>数据渲染、响应请求</li></ul><h2 id="二、SpringMVC框架部署"><a href="#二、SpringMVC框架部署" class="headerlink" title="二、SpringMVC框架部署"></a>二、SpringMVC框架部署</h2><h4 id="2-1-基于Maven创建一个web工程"><a href="#2-1-基于Maven创建一个web工程" class="headerlink" title="2.1 基于Maven创建一个web工程"></a>2.1 基于Maven创建一个web工程</h4><ul><li>SpringMVC是一个web框架，应用在web工程中</li></ul><h4 id="2-2-添加SpringMVC依赖"><a href="#2-2-添加SpringMVC依赖" class="headerlink" title="2.2 添加SpringMVC依赖"></a>2.2 添加SpringMVC依赖</h4><ul><li>spring-context</li><li>spring-aspects</li><li>spring-jdbc</li><li>spring-test</li><li>spring-web</li><li>spring-webmvc</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-创建SpringMVC配置文件"><a href="#2-3-创建SpringMVC配置文件" class="headerlink" title="2.3 创建SpringMVC配置文件"></a>2.3 创建SpringMVC配置文件</h4><ul><li>在resources目录下创建名为<code>spring-servlet.xml</code>的文件</li><li>添加MVC命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--IoC采用注解配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qfedu&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-4-在web-xml中配置SpringMVC的前端控制器"><a href="#2-4-在web-xml中配置SpringMVC的前端控制器" class="headerlink" title="2.4 在web.xml中配置SpringMVC的前端控制器"></a>2.4 在web.xml中配置SpringMVC的前端控制器</h4><blockquote><p>SpringMVC提供了一个名为DispatcherServlet的类（SpringMVC前端控制器），用于拦截用户请求交由SpringMVC处理</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.1&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、SpringMVC框架使用"><a href="#三、SpringMVC框架使用" class="headerlink" title="三、SpringMVC框架使用"></a>三、SpringMVC框架使用</h2><blockquote><p>在SpringMVC中，我们把接收用户请求、处理用户请求的类称之为Controlelr（控制器）</p></blockquote><h4 id="3-1-创建控制器"><a href="#3-1-创建控制器" class="headerlink" title="3.1 创建控制器"></a>3.1 创建控制器</h4><h6 id="3-1-1-创建控制器类"><a href="#3-1-1-创建控制器类" class="headerlink" title="3.1.1 创建控制器类"></a>3.1.1 创建控制器类</h6><ul><li><p>创建一个名为<code>com.qfedu.controllers</code>的包（包需要在Spring注解扫描的范围内）</p></li><li><p>创建一个类（无需做任何的继承和实现）</p></li><li><p>在类上添加<code>@Controller</code>注解声明此类为SpringMVC的控制器</p></li><li><p>在类上添加<code>@RequestMapping(&quot;url&quot;)</code>声明此控制器类的请求url（可以省略）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2-在控制器类中定义处理请求的方法"><a href="#3-1-2-在控制器类中定义处理请求的方法" class="headerlink" title="3.1.2 在控制器类中定义处理请求的方法"></a>3.1.2 在控制器类中定义处理请求的方法</h6><ul><li>在一个控制器类中可以定于多个方法处理不同的请求</li><li>在每个方法上添加<code>@RequestMapping(&quot;url&quot;)</code>用于声明当前方法请求的url</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---book akdd&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listBooks</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---book list&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-3-访问"><a href="#3-1-3-访问" class="headerlink" title="3.1.3 访问"></a>3.1.3 访问</h6><ul><li><p><a href="http://localhost:8080/springmvc_demo2/book/add">http://localhost:8080/springmvc_demo2/book/add</a></p></li><li><p><a href="http://localhost:8080/springmvc_demo2/book/list">http://localhost:8080/springmvc_demo2/book/list</a></p></li></ul><h4 id="3-2-静态资源配置"><a href="#3-2-静态资源配置" class="headerlink" title="3.2 静态资源配置"></a>3.2 静态资源配置</h4><blockquote><p>静态资源：就是项目中的HTML、css、js、图片、字体等</p></blockquote><h6 id="3-2-1-x2F-和-x2F-的区别"><a href="#3-2-1-x2F-和-x2F-的区别" class="headerlink" title="3.2.1 &#x2F;* 和 &#x2F; 的区别"></a>3.2.1 &#x2F;* 和 &#x2F; 的区别</h6><ul><li>&#x2F;* 拦截所有的HTTP请求，包括.jsp的请求，都做为控制器类的请求路径来处理</li><li>&#x2F; 拦截所有的HTTP请求，但不包括.jsp的请求，不会放行静态资源的请求（html&#x2F;css&#x2F;js&#x2F;图片）</li></ul><h6 id="3-2-2-静态资源放行配置"><a href="#3-2-2-静态资源放行配置" class="headerlink" title="3.2.2 静态资源放行配置"></a>3.2.2 静态资源放行配置</h6><ul><li>在springMVC的配置文件，添加如下静态资源放行的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置静态资源放行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/css/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/css/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/../../imgs/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/../imgs/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/pages/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/pages/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-前端提交数据到控制器"><a href="#3-3-前端提交数据到控制器" class="headerlink" title="3.3 前端提交数据到控制器"></a>3.3 前端提交数据到控制器</h4><h6 id="3-3-1-表单提交"><a href="#3-3-1-表单提交" class="headerlink" title="3.3.1 表单提交"></a>3.3.1 表单提交</h6><ul><li><p>表单提交：输入框需要提供name属性，SpringMVC控制器是通过name属性取值的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>添加图书<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;book/add&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书名称:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书作者:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书价格:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="3-3-2-URL提交"><a href="#3-3-2-URL提交" class="headerlink" title="3.3.2 URL提交"></a>3.3.2 URL提交</h6><ul><li><p>URL提交：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;book/add?bookName=Java&quot;</span>&gt;</span>URL提交<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="3-3-3-AJAX提交"><a href="#3-3-3-AJAX提交" class="headerlink" title="3.3.3 AJAX提交"></a>3.3.3 AJAX提交</h6><ul><li><p>AJAX提交：请求行、请求头、请求体都可以用来传值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ajax提交&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="language-javascript">        obj.<span class="hljs-property">bookName</span> = <span class="hljs-string">&quot;Java&quot;</span>;</span><br><span class="language-javascript">        obj.<span class="hljs-property">bookAuthor</span>=<span class="hljs-string">&quot;张三&quot;</span>;</span><br><span class="language-javascript">        obj.<span class="hljs-property">bookPrice</span> = <span class="hljs-number">3.33</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;book/add&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">headers</span>:&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>:<span class="hljs-string">&quot;application/json&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:obj,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-4-控制器接收前端提交的数据"><a href="#3-4-控制器接收前端提交的数据" class="headerlink" title="3.4 控制器接收前端提交的数据"></a>3.4 控制器接收前端提交的数据</h4><h6 id="3-4-1-RequestParam-接收请求行传值"><a href="#3-4-1-RequestParam-接收请求行传值" class="headerlink" title="3.4.1 @RequestParam 接收请求行传值"></a>3.4.1 @RequestParam 接收请求行传值</h6><ul><li>表单提交</li><li>URL提交</li><li>$.ajax()请求的url传值</li><li>$.post()&#x2F;$.get()中的{}传值</li></ul><p>**<code>@RequestParam</code>**注解用于接收请求行传递的数据</p><ul><li><p>前端提交数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;book/add&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书名称:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书作者:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图书价格:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>控制器接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*接收请求行数据*/</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String a,</span><br><span class="hljs-params">                    <span class="hljs-meta">@RequestParam(&quot;author&quot;)</span> String b,</span><br><span class="hljs-params">                    <span class="hljs-meta">@RequestParam(&quot;price&quot;)</span> <span class="hljs-type">double</span> c)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    System.out.println(a);<br>    System.out.println(b);<br>    System.out.println(c);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><code>注意</code><strong>如果控制器方法中接收数据的参数名与请求行传值的key一致，则@RequestParam注解可省略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name,String author, <span class="hljs-type">double</span> price)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    System.out.println(name);<br>    System.out.println(author);<br>    System.out.println(price);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-4-2-RequestHeader接收请求头传值"><a href="#3-4-2-RequestHeader接收请求头传值" class="headerlink" title="3.4.2 @RequestHeader接收请求头传值"></a>3.4.2 @RequestHeader接收请求头传值</h6><ul><li>ajax封装请求头数据</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    ...,<br>    <span class="hljs-attr">headers</span>:&#123;<br>       <br>&#125;,<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>**<code>@RequestHeader</code>**注解用于接收请求行头传递的数据</p><ul><li><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;ajax提交&quot;</span> id=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            $.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;book/list&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">headers</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">token</span>:<span class="hljs-string">&quot;wahahaawahaha&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listBooks</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span> String token)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book list&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="3-4-3-RequestBody接收请求体传值"><a href="#3-4-3-RequestBody接收请求体传值" class="headerlink" title="3.4.3 @RequestBody接收请求体传值"></a>3.4.3 @RequestBody接收请求体传值</h6><ul><li><p>ajax封装请求体数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    ...,<br>    <span class="hljs-attr">contentType</span>:<span class="hljs-string">&quot;application/json&quot;</span>,<br>    <span class="hljs-attr">data</span>:obj,,<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>**<code>@RequestBody</code>**注解用于接收请求行头传递的数据</p><ul><li><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ajax提交&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="language-javascript">            obj.<span class="hljs-property">bookName</span> = <span class="hljs-string">&quot;Python&quot;</span>;</span><br><span class="language-javascript">            obj.<span class="hljs-property">bookAuthor</span>=<span class="hljs-string">&quot;杰哥&quot;</span>;</span><br><span class="language-javascript">            obj.<span class="hljs-property">bookPrice</span> = <span class="hljs-number">2.22</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj); <span class="hljs-comment">//将对象转换成JSON格式</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript">            $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;book/update&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">contentType</span>:<span class="hljs-string">&quot;application/json&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:s,   <span class="hljs-comment">//如果data的值为json格式字符串，contentType必须设置为&quot;application/json&quot;</span></span><br><span class="language-javascript">                <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>@RquestBody 将前端请求体提交的JSON格式数据转换成Java对象，依赖jackson包</p></blockquote><ul><li><p>导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book update&quot;</span>);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-5-控制器响应前端请求"><a href="#3-5-控制器响应前端请求" class="headerlink" title="3.5 控制器响应前端请求"></a>3.5 控制器响应前端请求</h4><h6 id="3-5-1-控制器响应同步请求"><a href="#3-5-1-控制器响应同步请求" class="headerlink" title="3.5.1 控制器响应同步请求"></a>3.5.1 控制器响应同步请求</h6><blockquote><p>同步请求：form、超链接</p><p>处理同步请求的方法的返回类型定义为String或者ModelAndView，以实现页面的跳转</p></blockquote><ul><li><p>返回类型为String</p><p><strong>转发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/tips.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重定向</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/tips.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>返回类型为 ModelAndView</p><p><strong>转发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;/tips.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重定向</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---book add&quot;</span>);<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;redirect:/tips.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="3-5-2-控制器响应异步请求"><a href="#3-5-2-控制器响应异步请求" class="headerlink" title="3.5.2 控制器响应异步请求"></a>3.5.2 控制器响应异步请求</h6><blockquote><p> 异步请求：ajax请求</p></blockquote><p><strong>使用response中的输出流进行响应</strong></p><ul><li>控制器方法的返回类型为<code>void</code></li><li>控制器方法添加 <code>HttpServletResponse response</code>参数</li><li>在方法中通过response获取输出流，使用流响应ajax请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;---book update&quot;</span>);<br>    System.out.println(book);<br><br>    <span class="hljs-comment">//使用ObjectMapper将对象转换成JSON格式字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(book);<br>    response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>    out.println(s);<br>    out.flush();<br>    out.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>直接在控制器方法返回响应的对象</strong></p><ul><li>控制器方法的返回类型设置为响应给ajax请求的对象类型</li><li>在控制器方法前添加<code>@ResponseBody</code>注解，将返回的对象转换成JSON响应给ajax请求</li><li>如果一个控制器类中的所有方法都是响应ajax请求，则可以直接在控制器类前添加<code>@ResponseBody</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---book update&quot;</span>);<br>    List&lt;Book&gt; books = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Book&gt;();<br>    books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-number">2.22</span>));<br>    books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;老李&quot;</span>,<span class="hljs-number">3.22</span>));<br>    <span class="hljs-keyword">return</span> books;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-5-3-控制器响应同步请求的数据传递"><a href="#3-5-3-控制器响应同步请求的数据传递" class="headerlink" title="3.5.3 控制器响应同步请求的数据传递"></a>3.5.3 控制器响应同步请求的数据传递</h6><blockquote><p>对于同步请求的转发响应，我们可以传递参数到转发的页面</p></blockquote><ul><li><p>返回类型为String:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.在控制器方法中定义一个Model类型的参数</span><br><span class="hljs-comment">//2.在return页面之前，向model中添加键值对，添加的键值对就会被传递到转发的页面</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price,Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-number">2.22</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/tips.jsp&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//除了使用Model对象传值外，还可以直接使用HttpServletRequest对象</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price,HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-number">2.22</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/tips.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>返回类型ModelAndView:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add2&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">addBook2</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span>&#123;<br><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;/tips.jsp&quot;</span>);<br>    modelAndView.addObject(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    modelAndView.addObject(<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-number">2.22</span>));<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-6-解决中文乱码问题"><a href="#3-6-解决中文乱码问题" class="headerlink" title="3.6 解决中文乱码问题"></a>3.6 解决中文乱码问题</h4><h6 id="3-6-1-前端编码"><a href="#3-6-1-前端编码" class="headerlink" title="3.6.1 前端编码"></a>3.6.1 前端编码</h6><ul><li><p>JSP页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>HTML页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="3-6-2-服务器编码"><a href="#3-6-2-服务器编码" class="headerlink" title="3.6.2 服务器编码"></a>3.6.2 服务器编码</h6><ul><li><p>tomcat&#x2F;conf&#x2F;server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span>  <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="3-6-3-设置SpringMVC的编码方式"><a href="#3-6-3-设置SpringMVC的编码方式" class="headerlink" title="3.6.3 设置SpringMVC的编码方式"></a>3.6.3 设置SpringMVC的编码方式</h6><ul><li><p>在web.xml中配置SpringMVC编码过滤器的编码方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>EncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>EncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="四、SpringMVC的请求处理流程"><a href="#四、SpringMVC的请求处理流程" class="headerlink" title="四、SpringMVC的请求处理流程"></a>四、SpringMVC的请求处理流程</h2><h4 id="4-1-请求处理流程"><a href="#4-1-请求处理流程" class="headerlink" title="4.1 请求处理流程"></a>4.1 请求处理流程</h4><blockquote><p>SpringMVC通过前端控制器（DispatcherServlet）拦截并处理用户请求的</p></blockquote><p><img src="/../imgs/1617257389694.png" alt="1617257389694"></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cos">① 前端发送请求被前端控制器DispatcherServlet拦截<br>② 前端控制器调用处理器映射器HandlerMapping对请求URL进行解析，解析之后返回调用给前端控制器<br>③ 前端控制器调用处理器适配器处理调用链<br>④ 处理器适配器基于反射通过适配器设计模式完成处理器(控制器)的调用处理用户请求<br>⑤ 处理器适配器将控制器返回的视图和数据信息封装成ModelAndView响应给前端控制器<br>⑥ 前端控制器调用视图解析器ViewResolver对ModelAndView进行解析，将解析结果（视图资源和数据）响应给前端控制器<br>⑦ 前端控制器调用视图<span class="hljs-keyword">view</span>组件将数据进行渲染，将渲染结果（静态视图）响应给前端控制器<br>⑧ 前端控制器响应用户请求<br></code></pre></td></tr></table></figure><h4 id="4-2-SpringMVC的核心组件"><a href="#4-2-SpringMVC的核心组件" class="headerlink" title="4.2 SpringMVC的核心组件"></a>4.2 SpringMVC的核心组件</h4><ul><li><p><code>DispatcherServlet</code> 前端控制器、总控制器</p><ul><li>作用：接收请求，协同各组件工作、响应请求</li></ul></li><li><p><code>HandlerMapping</code> 处理器映射</p><ul><li>作用：负责根据用户请求的URL找到对应的Handler</li><li><strong>可配置</strong> SpringMVC提供多个处理器映射的实现，可以根据需要进行配置</li></ul></li><li><p><code>HandlerAdapter</code> 处理器适配器</p><ul><li>作用：按照处理器映射器解析的用户请求的调用链，通过适配器模式完成Handler的调用</li></ul></li><li><p><code>Handler</code> 处理器&#x2F;控制器</p><ul><li>由工程师根据业务的需求进行开发</li><li>作用：处理请求</li></ul></li><li><p><code>ModelAndView</code> 视图模型</p><ul><li>作用：用于封装处理器返回的数据以及相应的视图</li><li>ModelAndView &#x3D; Model + View</li></ul></li><li><p><code>ViewResolver</code> 视图解析器</p><ul><li>作用：对ModelAndView进行解析</li><li><strong>可配置</strong> SpringMVC提供多个视图解析器的实现，可以根据需要进行配置</li></ul></li><li><p><code>View</code> 视图</p><ul><li>作用：完成数据渲染</li></ul></li></ul><h4 id="4-3-处理器映射器"><a href="#4-3-处理器映射器" class="headerlink" title="4.3  处理器映射器"></a>4.3  处理器映射器</h4><blockquote><p>不同的处理器映射器对URL处理的方式也不相同，使用对应的处理器映射器之后我们的前端请求规则也需要发生相应的变化</p><p>SpringMVC提供的处理器映射器：</p><ul><li>BeanNameUrlHandlerMapping  根据控制器的ID访问控制器</li><li>SimpleUrlHandlerMapping 根据控制器配置的URL访问（默认）</li></ul></blockquote><p>配置处理器映射器：</p><ul><li><p>在SpringMVC的配置文件中通过bean标签声明处理器映射器</p></li><li><p>配置BeanNameUrlHandlerMapping  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置SimpleUrlHandlerMapping</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;/aaa&quot;</span>&gt;</span>bookController<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;/bbb&quot;</span>&gt;</span>studentController<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-4-视图解析器"><a href="#4-4-视图解析器" class="headerlink" title="4.4  视图解析器"></a>4.4  视图解析器</h4><blockquote><p>Spring提供了多个视图解析器：</p><ul><li>UrlBasedViewResolver</li><li>InternalResourceViewResolver</li></ul></blockquote><ul><li><p>UrlBasedViewResolver 需要依赖jstl</p><ul><li>添加JSTL的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置视图解析器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>InternalResourceViewResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="五、日期格式处理"><a href="#五、日期格式处理" class="headerlink" title="五、日期格式处理"></a>五、日期格式处理</h2><h4 id="5-1-在控制器中使用对象接收数据"><a href="#5-1-在控制器中使用对象接收数据" class="headerlink" title="5.1 在控制器中使用对象接收数据"></a>5.1 在控制器中使用对象接收数据</h4><ul><li><p>前端：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;test/add&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;p&gt;图书名称:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;图书作者:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;图书价格:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-comment">//表单提交的多个数据，在控制器方法中可以使用对象接收</span><br>    <span class="hljs-comment">//但是提交的数据的key必须要与对象的属性名一致</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/tips.jsp&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-2-日期格式处理"><a href="#5-2-日期格式处理" class="headerlink" title="5.2 日期格式处理"></a>5.2 日期格式处理</h4><blockquote><p>如果前端需要输入日期数据，在控制器中转换成Date对象，SpringMVC要求前端输入的日期格式必须为<code>yyyy/MM/dd</code></p><p>如果甲方要求日期格式必须为指定的格式，而这个指定格式SpringMVC不接受，该如何处理呢？</p><ul><li>自定义日期转换器</li></ul></blockquote><h6 id="5-2-1-创建自定义日期转换器"><a href="#5-2-1-创建自定义日期转换器" class="headerlink" title="5.2.1 创建自定义日期转换器"></a>5.2.1 创建自定义日期转换器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 1.创建一个类实现Converter接口，泛型指定从什么类型转换为什么类型</span><br><span class="hljs-comment"> * 2.实现convert转换方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = sdf.parse(s);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-2-2-配置自定义转换器"><a href="#5-2-2-配置自定义转换器" class="headerlink" title="5.2.2 配置自定义转换器"></a>5.2.2 配置自定义转换器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;converterFactory&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;converterFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.utils.MyDateConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、文件上传下载"><a href="#六、文件上传下载" class="headerlink" title="六、文件上传下载"></a>六、文件上传下载</h2><h4 id="6-1-SpringMVC框架部署"><a href="#6-1-SpringMVC框架部署" class="headerlink" title="6.1 SpringMVC框架部署"></a>6.1 SpringMVC框架部署</h4><ul><li><p>基于Maven创建web工程</p></li><li><p>添加SpringMVC所需的依赖</p><ul><li>Spring:context aspects jdbc  test web webmvc  jackson</li></ul></li><li><p>创建SpringMVC配置文件</p></li><li><p>在web.xml中配置SpringMVC的前端控制器</p></li><li><p>在web.xml中配置SpringMVC的编码过滤器</p></li><li><p>配置springmvc静态资源处理策略</p></li></ul><h4 id="6-2-文件上传"><a href="#6-2-文件上传" class="headerlink" title="6.2 文件上传"></a>6.2 文件上传</h4><blockquote><p>案例：添加图书，同时提交图书的封面图片</p></blockquote><h6 id="6-2-1-前端提交文件"><a href="#6-2-1-前端提交文件" class="headerlink" title="6.2.1 前端提交文件"></a>6.2.1 前端提交文件</h6><ul><li>表单提示方式必须为post</li><li>表单enctype属性设置为<code>multipart/form-data</code></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;book/add&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;p&gt;图书名称:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;图书作者:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;图书价格:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;图书封面:&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;imgFile&quot;</span>/&gt;&lt;/p&gt;<br>    &lt;p&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><h6 id="6-2-2-控制器接收数据和文件"><a href="#6-2-2-控制器接收数据和文件" class="headerlink" title="6.2.2 控制器接收数据和文件"></a>6.2.2 控制器接收数据和文件</h6><blockquote><p>SpringMVC处理上传文件需要借助于CommonsMultipartResolver文件解析器</p></blockquote><ul><li><p>添加依赖：commons-io  commons-fileupload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在spring-servlet.xml中配置文件解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10240000&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102400&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>控制器接收文件</p><ul><li>在处理文件上传的方法中定义一个MultiPartFile类型的对象，就可以接受图片了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br><br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book, MultipartFile imgFile, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------add&quot;</span>);<br><br>        <span class="hljs-comment">//imgFile就表示上传的图片</span><br>        <span class="hljs-comment">//1.截取上传文件的后缀名,生成新的文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> imgFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ext</span> <span class="hljs-operator">=</span> originalFilename.substring( originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) ); <br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> System.currentTimeMillis()+ext;<br><br>        <span class="hljs-comment">//2.获取../imgs目录在服务器的路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;../imgs&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">savePath</span> <span class="hljs-operator">=</span> dir+<span class="hljs-string">&quot;/&quot;</span>+fileName; <br><br>        <span class="hljs-comment">//3.保存文件</span><br>        imgFile.transferTo( <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(savePath));<br><br>        <span class="hljs-comment">//4.将图片的访问路径设置到book对象</span><br>        book.setBookImg(<span class="hljs-string">&quot;../imgs/&quot;</span>+fileName);<br><br>        <span class="hljs-comment">//5.调用service保存book到数据库</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/tips.jsp&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="6-3-文件下载"><a href="#6-3-文件下载" class="headerlink" title="6.3 文件下载"></a>6.3 文件下载</h4><h6 id="6-3-1-显示文件列表"><a href="#6-3-1-显示文件列表" class="headerlink" title="6.3.1 显示文件列表"></a>6.3.1 显示文件列表</h6><ul><li><p>list.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Title&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> integrity=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;<br>    &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css&quot;</span> integrity=<span class="hljs-string">&quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;<br>    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;<br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span> integrity=<span class="hljs-string">&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<br>    &lt;body&gt;<br><br>    &lt;h4&gt;文件列表&lt;/h4&gt;<br><br>    &lt;div class=<span class="hljs-string">&quot;row&quot;</span> id=<span class="hljs-string">&quot;container&quot;</span>&gt;&lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $.get(<span class="hljs-string">&quot;book/list&quot;</span>,function(res)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; res.length; i++) &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> res[i];<br>                <span class="hljs-type">var</span> <span class="hljs-variable">htmlStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;../imgs/&quot;</span>+fn+<span class="hljs-string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;#&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;<br>                $(<span class="hljs-string">&quot;#container&quot;</span>).append(htmlStr);<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>    &lt;/script&gt;<br><br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>BookController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String[] list../imgs(HttpServletRequest request)&#123;<br>    <span class="hljs-comment">//从../imgs目录下获取所有的图片信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;../imgs&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">imgDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir);<br>    String[] fileNames = imgDir.list();<br>    <span class="hljs-keyword">return</span> fileNames;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="6-3-2-实现文件下载"><a href="#6-3-2-实现文件下载" class="headerlink" title="6.3.2 实现文件下载"></a>6.3.2 实现文件下载</h6><ul><li><p>list.jsp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlStr = <span class="hljs-string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;../imgs/&quot;</span>+fn+<span class="hljs-string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;book/download?fname=&quot;</span>+fn+<span class="hljs-string">&quot;&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>BookController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloadImg</span><span class="hljs-params">(String fname, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//从../imgs目录找到当前文件</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;../imgs&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> dir+<span class="hljs-string">&quot;/&quot;</span>+fname;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br><br>    response.setContentType(<span class="hljs-string">&quot;application/exe&quot;</span>);<br>    response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+fname);<br><br>    IOUtils.copy(fileInputStream, response.getOutputStream());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="七、统一异常处理"><a href="#七、统一异常处理" class="headerlink" title="七、统一异常处理"></a>七、统一异常处理</h2><blockquote><p>在我们的应用系统运行的过程中，可能由于运行环境、用户操作、资源不足等各方面的原因导致系统出现异常（HTTP状态异常、Exception）；如果系统出现了异常，这些异常将会通过浏览器呈现给用户，而这种异常的显示是没有必要，因此我们可以在服务器进行特定的处理——当系统出现异常之后，呈现给用户一个统一的、可读的的异常提示页面。</p></blockquote><h4 id="7-1-HTTP异常状态统一处理"><a href="#7-1-HTTP异常状态统一处理" class="headerlink" title="7.1 HTTP异常状态统一处理"></a>7.1 HTTP异常状态统一处理</h4><blockquote><p><strong>HTTP Status 404</strong></p></blockquote><ul><li><p>创建一个用于进行异常提示的页面：404.jsp</p></li><li><p>在web.xml中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/404.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="7-2-Java代码异常的统一处理"><a href="#7-2-Java代码异常的统一处理" class="headerlink" title="7.2 Java代码异常的统一处理"></a>7.2 Java代码异常的统一处理</h4><h6 id="7-2-1-基于Servlet-api的处理"><a href="#7-2-1-基于Servlet-api的处理" class="headerlink" title="7.2.1 基于Servlet-api的处理"></a>7.2.1 基于Servlet-api的处理</h6><ul><li><p>创建异常提示页面：err.jsp</p></li><li><p>在web.xml中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exception-type</span>&gt;</span>java.lang.NumberFormatException<span class="hljs-tag">&lt;/<span class="hljs-name">exception-type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/err.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="7-2-2-SpringMVC处理"><a href="#7-2-2-SpringMVC处理" class="headerlink" title="7.2.2 SpringMVC处理"></a>7.2.2 SpringMVC处理</h6><ul><li><p>使用异常处理类进行统一处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(NullPointerException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">nullHandler</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/err1.jsp&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(NumberFormatException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">formatHandler</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/err2.jsp&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h2><h4 id="8-1-拦截器介绍"><a href="#8-1-拦截器介绍" class="headerlink" title="8.1 拦截器介绍"></a>8.1 拦截器介绍</h4><blockquote><p>SpringMVC提供的拦截器就类似于Servlet-api中的过滤器，可以对控制器的请求进行拦截实现相关的预处理和后处理。</p></blockquote><ul><li>过滤器<ul><li>是Servlet规范的一部分，所有的web项目都可以使用</li><li>过滤器在web.xml配置（可以使用注解），能够拦截所有web请求</li></ul></li><li>拦截器<ul><li>是SpringMVC框架的实现，只有在SpringMVC框架中才能使用</li><li>拦截器在SpringMVC配置文件进行配置，不会拦截SpringMVC放行的资源（jsp\html\css..）</li></ul></li></ul><h4 id="8-2-自定义拦截器"><a href="#8-2-自定义拦截器" class="headerlink" title="8.2 自定义拦截器"></a>8.2 自定义拦截器</h4><h6 id="8-2-1-创建拦截器"><a href="#8-2-1-创建拦截器" class="headerlink" title="8.2.1 创建拦截器"></a>8.2.1 创建拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">//预处理方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------预处理&quot;</span>);<br>        Enumeration&lt;String&gt; keys = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (keys.hasMoreElements())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keys.nextElement();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;bookId&quot;</span>.equals(key))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        response.setStatus(<span class="hljs-number">400</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//后处理方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        modelAndView.addObject(<span class="hljs-string">&quot;tips&quot;</span>,<span class="hljs-string">&quot;这是通过拦截器的后处理添加的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;--------------后处理&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="8-2-2-配置拦截器"><a href="#8-2-2-配置拦截器" class="headerlink" title="8.2.2 配置拦截器"></a>8.2.2 配置拦截器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/book/query&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/book/add&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/student/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/student/add&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.utils.MyInterceptor1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-拦截器链"><a href="#8-3-拦截器链" class="headerlink" title="8.3 拦截器链"></a>8.3 拦截器链</h4><blockquote><p>将多个拦截器按照一定的顺序构成一个执行链</p></blockquote><p><img src="/../imgs/1617334128888.png" alt="1617334128888"></p><h2 id="九、SSM整合"><a href="#九、SSM整合" class="headerlink" title="九、SSM整合"></a>九、SSM整合</h2><h4 id="9-1-创建web项目"><a href="#9-1-创建web项目" class="headerlink" title="9.1 创建web项目"></a>9.1 创建web项目</h4><ul><li><p>创建maven工程</p></li><li><p>修改pom文件 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>完成maven工程web项目结构</p></li><li><p>添加web项目依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置服务器运行环境</p></li></ul><h4 id="9-2-部署MyBatis"><a href="#9-2-部署MyBatis" class="headerlink" title="9.2 部署MyBatis"></a>9.2 部署MyBatis</h4><ul><li><p>添加MyBatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建MyBatis配置文件<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-部署Spring、SpringMVC"><a href="#9-3-部署Spring、SpringMVC" class="headerlink" title="9.3 部署Spring、SpringMVC"></a>9.3 部署Spring、SpringMVC</h4><h6 id="9-3-1-添加依赖"><a href="#9-3-1-添加依赖" class="headerlink" title="9.3.1 添加依赖"></a>9.3.1 添加依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--context--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--aspects--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--jdbc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--test--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--webmvc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--jackson-databind--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h6 id="9-3-2-创建Spring配置"><a href="#9-3-2-创建Spring配置" class="headerlink" title="9.3.2 创建Spring配置"></a>9.3.2 创建Spring配置</h6><ul><li><p>多配置文件分开配置</p><ul><li><p>spring-context.xml    只配置注解声明、以及类的管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明使用注解配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qfedu&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>spring-mvc.xml   进行mvc相关的配置，例如静态资源配置、拦截器配置等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明MVC使用注解配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>spring-mybatis.xml  进行Spring与MyBatis整合相关的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h6 id="9-3-3-配置SpringMVC前端控制器"><a href="#9-3-3-配置SpringMVC前端控制器" class="headerlink" title="9.3.3 配置SpringMVC前端控制器"></a>9.3.3 配置SpringMVC前端控制器</h6><ul><li>在web.xml进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-4-整合配置-IoC"><a href="#9-4-整合配置-IoC" class="headerlink" title="9.4 整合配置(IoC)"></a>9.4 整合配置(IoC)</h4><h6 id="9-4-1-导入mybatis-spring依赖"><a href="#9-4-1-导入mybatis-spring依赖" class="headerlink" title="9.4.1 导入mybatis-spring依赖"></a>9.4.1 导入mybatis-spring依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="9-4-2-配置druid连接池"><a href="#9-4-2-配置druid连接池" class="headerlink" title="9.4.2 配置druid连接池"></a>9.4.2 配置druid连接池</h6><ul><li><p>添加druid依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建druid.properties,并配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">druid.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span><br><span class="hljs-attr">druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">druid.password</span>=<span class="hljs-string">admin123</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 连接池参数</span><br><span class="hljs-attr">druid.pool.init</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">druid.pool.minIdle</span>=<span class="hljs-string">3</span><br><span class="hljs-attr">druid.pool.maxActive</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">druid.pool.timeout</span>=<span class="hljs-string">30000</span><br></code></pre></td></tr></table></figure></li><li><p>在spring-mybatis.xml配置数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:druid.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="9-4-3-配置SqlSessionFactory"><a href="#9-4-3-配置SqlSessionFactory" class="headerlink" title="9.4.3 配置SqlSessionFactory"></a>9.4.3 配置SqlSessionFactory</h6><ul><li><p>在spring-mybatis.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.qfedu.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="9-4-4-配置MapperScannerConfigurer"><a href="#9-4-4-配置MapperScannerConfigurer" class="headerlink" title="9.4.4 配置MapperScannerConfigurer"></a>9.4.4 配置MapperScannerConfigurer</h6><ul><li><p>在spring-mybatis.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.qfedu.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-5-整合配置（AOP）"><a href="#9-5-整合配置（AOP）" class="headerlink" title="9.5 整合配置（AOP）"></a>9.5 整合配置（AOP）</h4><blockquote><p>使用Spring提供的事务管理完成DAO操作的事务管理</p><p>基于注解的事务管理配置：</p></blockquote><ul><li><p>将Spring提供的事务管理切面类配置到Spring容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-6-整合测试"><a href="#9-6-整合测试" class="headerlink" title="9.6 整合测试"></a>9.6 整合测试</h4><h6 id="9-6-1-完成User的查询操作"><a href="#9-6-1-完成User的查询操作" class="headerlink" title="9.6.1 完成User的查询操作"></a>9.6.1 完成User的查询操作</h6><ul><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> userId;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String userPwd;<br>    <span class="hljs-keyword">private</span> String userRealname;<br>    <span class="hljs-keyword">private</span> String userImg;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在DAO包中创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDAO</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByName</span><span class="hljs-params">(String name)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在mappers目录下创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qfedu.dao.UserDAO&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userPwd&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_realname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userRealname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_img&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userImg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        select user_id,user_name,user_pwd,user_realname,user_img<br>        from users<br>        where user_name=#&#123;userName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="9-6-2-对DAO单元测试"><a href="#9-6-2-对DAO单元测试" class="headerlink" title="9.6.2 对DAO单元测试"></a>9.6.2 对DAO单元测试</h6><ul><li><p>添加junit、spring-test依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&#123;&quot;classpath:spring-context.xml&quot;,&quot;classpath:spring-mvc.xml&quot;,&quot;classpath:spring-mybatis.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDAOTest</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDAO userDAO;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryUserByName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDAO.queryUserByName(<span class="hljs-string">&quot;wangwu&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/02/Spring/"/>
    <url>/2023/05/02/Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h2><h4 id="1-1-web项目开发中的耦合度问题"><a href="#1-1-web项目开发中的耦合度问题" class="headerlink" title="1.1 web项目开发中的耦合度问题"></a>1.1 web项目开发中的耦合度问题</h4><ul><li><p>在Servlet中需要调用service中的方法，则需要在Servlet类中通过new关键字创建Service的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">listProducts</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">listProducts</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//查询热销商品</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">listProducts</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//查询好评商品</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductListServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br>    <br>    <span class="hljs-comment">//在servlet中使用new关键字创建ProductServiceImpl1对象，增加了servlet和service的耦合度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ProductService</span> <span class="hljs-variable">productService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductServiceImpl1</span>();<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;<br>        doPost(request,response);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;<br>        productService.listProducts();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在service实现类中需要调用DAO中的方法，也需要在servcie实现类通过new关键字创建DAO实现类对象</p></li><li><p>如果使用new关键字创建对象：</p><ul><li>失去了面向接口编程的灵活性</li><li>代码的侵入性增强（增加了耦合度）、降低了代码的灵活性</li><li>增强项目的扩展性</li></ul></li></ul><h4 id="1-2-面向接口编程"><a href="#1-2-面向接口编程" class="headerlink" title="1.2 面向接口编程"></a>1.2 面向接口编程</h4><table><thead><tr><th>面向接口编程</th></tr></thead><tbody><tr><td><img src="/../imgs/1616724645995.png" alt="1616724645995"></td></tr></tbody></table><p><code>解决方案</code>：在Servlet中定义Service接口的对象变量，不使用new关键字创建实现类对象，在servlet的实例化的时候，通过反射动态的给Service对象变量赋值。</p><p><code>如何实现</code>：Spring可以做到！！！</p><h4 id="1-3-Spring介绍"><a href="#1-3-Spring介绍" class="headerlink" title="1.3 Spring介绍"></a>1.3 Spring介绍</h4><blockquote><p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p></blockquote><ul><li>轻量级：体积小，对代码没有侵入性</li><li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li><li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li><li>容器：实例的容器，管理创建的对象</li></ul><h4 id="1-4-Spring架构"><a href="#1-4-Spring架构" class="headerlink" title="1.4 Spring架构"></a>1.4 Spring架构</h4><ul><li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p><p><img src="/../imgs/1616728103181.png" alt="1616728103181"></p></li><li><p>Spring架构图</p><p><img src="/../imgs/1616728204844.png" alt="1616728204844"></p></li></ul><h6 id="1-4-1-Core-Container"><a href="#1-4-1-Core-Container" class="headerlink" title="1.4.1 Core Container"></a>1.4.1 Core Container</h6><blockquote><p>Spring容器组件，用于完成实例的创建和管理</p><ul><li>core</li><li>beans   实例管理</li><li>context 容器上下文</li></ul></blockquote><h6 id="1-4-2-AOP、Aspects"><a href="#1-4-2-AOP、Aspects" class="headerlink" title="1.4.2 AOP、Aspects"></a>1.4.2 AOP、Aspects</h6><blockquote><p>Spring AOP组件，实现面向切面编程</p><ul><li>aop</li><li>aspects</li></ul></blockquote><h6 id="1-4-3-web"><a href="#1-4-3-web" class="headerlink" title="1.4.3 web"></a>1.4.3 web</h6><blockquote><p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p><ul><li>web (Spring对web项目的支持)</li><li>webmvc (SpringMVC组件)</li></ul></blockquote><h6 id="1-4-4-Data-Access"><a href="#1-4-4-Data-Access" class="headerlink" title="1.4.4 Data Access"></a>1.4.4 Data Access</h6><blockquote><p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p><ul><li>tx</li></ul></blockquote><h6 id="1-4-5-Test"><a href="#1-4-5-Test" class="headerlink" title="1.4.5 Test"></a>1.4.5 Test</h6><blockquote><p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p><ul><li>test</li></ul></blockquote><h2 id="二、Spring-IoC-—-基于XML"><a href="#二、Spring-IoC-—-基于XML" class="headerlink" title="二、Spring IoC — 基于XML"></a>二、Spring IoC — 基于XML</h2><blockquote><p>Spring IoC 容器组件，可以完成对象的创建、对象属性赋值、对象管理</p></blockquote><h4 id="2-1-Spring框架部署（IoC）"><a href="#2-1-Spring框架部署（IoC）" class="headerlink" title="2.1 Spring框架部署（IoC）"></a>2.1 Spring框架部署（IoC）</h4><h6 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h6><ul><li>Java</li><li>Web</li></ul><h6 id="2-1-2-添加SpringIoC依赖"><a href="#2-1-2-添加SpringIoC依赖" class="headerlink" title="2.1.2 添加SpringIoC依赖"></a>2.1.2 添加SpringIoC依赖</h6><ul><li>core</li><li>beans</li><li>aop</li><li>expression</li><li><code>context</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-1-3-创建Spring配置文件"><a href="#2-1-3-创建Spring配置文件" class="headerlink" title="2.1.3 创建Spring配置文件"></a>2.1.3 创建Spring配置文件</h6><blockquote><p>通过配置文件”告诉”Spring容器创建什么对象，给对象属性赋什么值</p></blockquote><ul><li>在resources目录下创建名为<code>appicationContext.xml</code>的文件（文件名是可以自定义的）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span><br>        <span class="hljs-comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span><br>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-SpringIoC使用"><a href="#2-2-SpringIoC使用" class="headerlink" title="2.2 SpringIoC使用"></a>2.2 SpringIoC使用</h4><blockquote><p>使用 SpringIoC组件创建并管理对象</p></blockquote><h6 id="2-2-1-创建一个实体类"><a href="#2-2-1-创建一个实体类" class="headerlink" title="2.2.1 创建一个实体类"></a>2.2.1 创建一个实体类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String stuNum;<br>    <span class="hljs-keyword">private</span> String stuName;<br>    <span class="hljs-keyword">private</span> String stuGender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> stuAge;<br>    <span class="hljs-keyword">private</span> Date enterenceTime; <span class="hljs-comment">//入学日期</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-在Spring配置文件中配置实体类"><a href="#2-2-2-在Spring配置文件中配置实体类" class="headerlink" title="2.2.2 在Spring配置文件中配置实体类"></a>2.2.2 在Spring配置文件中配置实体类</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10002&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李斯&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuGender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuAge&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-2-3-初始化Spring对象工厂，获取对象"><a href="#2-2-3-初始化Spring对象工厂，获取对象" class="headerlink" title="2.2.3 初始化Spring对象工厂，获取对象"></a>2.2.3 初始化Spring对象工厂，获取对象</h6><ul><li>ClassPathXMLApplicationContext</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.初始化Spring容器,加载Spring配置文件</span><br><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-comment">//2.通过Spring容器获取Student对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> (Student) context.getBean(<span class="hljs-string">&quot;stu&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-3-IoC和DI"><a href="#2-3-IoC和DI" class="headerlink" title="2.3 IoC和DI"></a>2.3 IoC和DI</h4><ul><li>IoC (Inverse of Control) 控制反转，通过Spring对象工厂完成对象的创建</li><li>DI (Dependency Injection)依赖注入，在Spring完成对象创建的同时依赖Spring容器完成对象属性的赋值</li></ul><h6 id="2-3-1-IoC"><a href="#2-3-1-IoC" class="headerlink" title="2.3.1 IoC"></a>2.3.1 IoC</h6><blockquote><p>当我们需要通过Spring对象工厂创建某个类的对象时候，需要将这个交给Spring管理——通过bean标签配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-3-2-DI"><a href="#2-3-2-DI" class="headerlink" title="2.3.2 DI"></a>2.3.2 DI</h6><blockquote><p>通过Spring容器给创建的对象属性赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10001&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-4-DI依赖注入"><a href="#2-4-DI依赖注入" class="headerlink" title="2.4 DI依赖注入"></a>2.4 DI依赖注入</h4><h6 id="2-4-1-依赖注入三种方式"><a href="#2-4-1-依赖注入三种方式" class="headerlink" title="2.4.1 依赖注入三种方式"></a>2.4.1 依赖注入三种方式</h6><blockquote><p>Spring容器加载配置文件之后，通过<code>反射</code>创建类的对象，并给属性赋值；</p><p>Spring容器通过反射实现属性注入有三种方式：</p><ul><li>set方法注入</li><li>构造器注入</li><li>接口注入（不常用）</li></ul></blockquote><h6 id="2-4-2-set方法注入"><a href="#2-4-2-set方法注入" class="headerlink" title="2.4.2 set方法注入"></a>2.4.2 set方法注入</h6><blockquote><p>在bean标签中通过配置property标签给属性属性赋值，实际上就是通过反射调用set方法完成属性的注入</p></blockquote><p><strong>简单类型及字符串</strong></p><ul><li>直接通过property标签的value属性赋值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    简单类型    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10001&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuAge&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--    字符串类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;62.3&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>日期类型</strong></p><ul><li>方式1：在property标签中通过ref引用Spring容器中的一个对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!--    日期类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enterenceTime&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;date&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>方式2：在property标签中添加子标签bean来指定对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!--    日期类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enterenceTime&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>自定义类对象属性</strong></p><ul><li>方式1：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cla&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;classId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2010&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Java2010&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  自定义对象类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cla&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>方式2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  自定义对象类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;classId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2010&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Java2010&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>集合类型</strong></p><ul><li><p>List</p><ul><li>List<String>  List中的元素是字符串或者简单类型的封装类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;旅游,电影&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>List<Object> List中的元素是对象类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span>  <span class="hljs-comment">&lt;!--引用容器中的备案--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sets&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--和list元素注入方式相同--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>k1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>k2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="2-4-3-构造器注入"><a href="#2-4-3-构造器注入" class="headerlink" title="2.4.3 构造器注入"></a>2.4.3 构造器注入</h6><p><strong>简单类型、字符串、对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String stuNum;<br>    <span class="hljs-keyword">private</span> String stuName;<br>    <span class="hljs-keyword">private</span> String stuGender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> stuAge;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> weight;<br>    <span class="hljs-keyword">private</span> Date enterenceTime; <span class="hljs-comment">//入学日期</span><br>    <span class="hljs-keyword">private</span> Clazz clazz;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String stuNum, String stuName, String stuGender, <span class="hljs-type">int</span> stuAge, <span class="hljs-type">double</span> weight, Date enterenceTime, Clazz clazz)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stuNum = stuNum;<br>        <span class="hljs-built_in">this</span>.stuName = stuName;<br>        <span class="hljs-built_in">this</span>.stuGender = stuGender;<br>        <span class="hljs-built_in">this</span>.stuAge = stuAge;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>        <span class="hljs-built_in">this</span>.enterenceTime = enterenceTime;<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10001&quot;</span>/&gt;</span>       <span class="hljs-comment">&lt;!--字符串类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;21&quot;</span>/&gt;</span>       <span class="hljs-comment">&lt;!--简单类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;62.5&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;date&quot;</span>/&gt;</span>       <span class="hljs-comment">&lt;!--对象类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>                  <span class="hljs-comment">&lt;!--对象类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>集合类型属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; sets;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(List&lt;String&gt; hobbies, Set&lt;String&gt; sets, Map&lt;String, Object&gt; maps, Properties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hobbies = hobbies;<br>        <span class="hljs-built_in">this</span>.sets = sets;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>key1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>value1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>key2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>value2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h4><blockquote><p>在bean标签可以通过scope属性指定对象的的作用域</p><ul><li>scope&#x3D;”singleton”  表示当前bean是单例模式（默认饿汉模式，Spring容器初始化阶段就会完成此对象的创建；当在bean标签中设置 lazy-init&#x3D;”true”变为懒汉模式）</li><li>scope&#x3D;”prototype” 表示当前bean为非单例模式，每次通过Spring容器获取此bean的对象时都会创建一个新的对象</li></ul></blockquote><ul><li>单例</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>多例</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-6-Bean的声明周期方法"><a href="#2-6-Bean的声明周期方法" class="headerlink" title="2.6 Bean的声明周期方法"></a>2.6 Bean的声明周期方法</h4><blockquote><p>在bean标签中通过init-method属性指定当前bean的初始化方法，初始化方法在构造器执行之后执行，通过destroy-method属性指定当前bean的销毁方法，销毁方法在对象销毁之前执行–&gt;</p></blockquote><ul><li><p>Bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bookId;<br>    <span class="hljs-keyword">private</span> String bookName;<br><br>     <span class="hljs-comment">//初始化方法：在创建当前类对象时调用的方法，进行一些资源准备工作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-------init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁方法：在Spring容器销毁对象时调用此方法，进行一些资源回收性的操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-------destory&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span><span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destory&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-自动装配"><a href="#2-7-自动装配" class="headerlink" title="2.7 自动装配"></a>2.7 自动装配</h4><blockquote><p>自动装配：Spring在实例化当前bean的时候从Spring容器中找到匹配的实例赋值给当前bean的属性</p><p>自动装配策略有两种：</p><ul><li>byName  根据当前Bean的属性名在Spring容器中寻找匹配的对象 ，如果根据name找打了bean但是类型不匹配则抛出异常</li><li>byType  根据当前Bean的属性类型在Spring容器中寻找匹配的对象，如果根据类型找到了多个bean也会抛出异常</li></ul></blockquote><ul><li>byName</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>byType</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazz2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-8-SpringIoC-工作原理"><a href="#2-8-SpringIoC-工作原理" class="headerlink" title="2.8 SpringIoC 工作原理"></a>2.8 SpringIoC 工作原理</h4><p><img src="/../imgs/1616752252731.png" alt="1616752252731"></p><h2 id="三、Spring-IoC-—-基于注解"><a href="#三、Spring-IoC-—-基于注解" class="headerlink" title="三、Spring IoC — 基于注解"></a>三、Spring IoC — 基于注解</h2><blockquote><p>SpringIoc的使用，需要我们通过XML将类声明给Spring容器进行管理，从而通过Spring工厂完成对象的创建及属性值的注入；</p><p>Spring除了提供基于XML的配置方式，同时提供了基于注解的配置：直接在实体类中添加注解声明给Spring容器管理，以简化开发步骤。</p></blockquote><h4 id="3-1-Spring框架部署"><a href="#3-1-Spring框架部署" class="headerlink" title="3.1 Spring框架部署"></a>3.1 Spring框架部署</h4><h6 id="3-1-1-创建Maven项目"><a href="#3-1-1-创建Maven项目" class="headerlink" title="3.1.1 创建Maven项目"></a>3.1.1 创建Maven项目</h6><p>略</p><h6 id="3-2-2-添加SpringIoC依赖"><a href="#3-2-2-添加SpringIoC依赖" class="headerlink" title="3.2.2 添加SpringIoC依赖"></a>3.2.2 添加SpringIoC依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-2-3-创建Spring配置文件"><a href="#3-2-3-创建Spring配置文件" class="headerlink" title="3.2.3 创建Spring配置文件"></a>3.2.3 创建Spring配置文件</h6><ul><li>因为Spring容器初始化时，只会加载applicationContext.xml文件，那么我们在实体类中添加的注解就不会被Spring扫描，所以我们需要<code>在applicationContext.xml声明Spring的扫描范围</code>，以达到Spring初始化时扫描带有注解的实体类并完成初始化工作</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明使用注解配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qfedu.beans&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-IoC常用注解"><a href="#3-2-IoC常用注解" class="headerlink" title="3.2 IoC常用注解"></a>3.2 IoC常用注解</h4><h6 id="3-2-1-Component"><a href="#3-2-1-Component" class="headerlink" title="3.2.1 @Component"></a>3.2.1 <code>@Component</code></h6><ul><li>类注解，声明此类被Spring容器进行管理，相当于bean标签的作用</li><li><code>@Component(value=&quot;stu&quot;)</code> value属性用于指定当前bean的id，相当于bean标签的id属性；value属性也可以省略，如果省略当前类的id默认为类名首字母改小写</li><li>除了@Component之外 @Service、@Controller、@Repository这三个注解也可以将类声明给Spring管理，他们主要是语义上的区别<ul><li>@Controller 注解主要声明将控制器类配置给Spring管理，例如Servlet</li><li>@Service 注解主要声明业务处理类配置Spring管理，Service接口的实现类</li><li>@Repository 直接主要声明持久化类配置给Spring管理，DAO接口</li><li>@Component 除了控制器、servcie和DAO之外的类一律使用此注解声明</li></ul></li></ul><h6 id="3-2-2-Scope"><a href="#3-2-2-Scope" class="headerlink" title="3.2.2 @Scope"></a>3.2.2 <code>@Scope</code></h6><ul><li>类注解，用于声明当前类单例模式还是 非单例模式，相当于bean标签的scope属性</li><li>@Scope(“prototype”) 表示声明当前类为非单例模式（默认单例模式）</li></ul><h6 id="3-2-3-Lazy"><a href="#3-2-3-Lazy" class="headerlink" title="3.2.3 @Lazy"></a>3.2.3 <code>@Lazy</code></h6><ul><li>类注解，用于声明一个单例模式的Bean是否为懒汉模式</li><li>@Lazy(true) 表示声明为懒汉模式，默认为饿汉模式</li></ul><h6 id="3-2-4-PostConstruct"><a href="#3-2-4-PostConstruct" class="headerlink" title="3.2.4 @PostConstruct"></a>3.2.4 <code>@PostConstruct</code></h6><ul><li>方法注解，声明一个方法为当前类的初始化方法（在构造器之后执行），相当于bean标签的init-method属性</li></ul><h6 id="3-2-5-PreDestroy"><a href="#3-2-5-PreDestroy" class="headerlink" title="3.2.5 @PreDestroy"></a>3.2.5 <code>@PreDestroy</code></h6><ul><li>方法注解，声明一个方法为当前类的销毁方法（在对象从容器中释放之前执行），相当于bean标签的destory-method属性</li></ul><h6 id="3-2-6-Autowired"><a href="#3-2-6-Autowired" class="headerlink" title="3.2.6 @Autowired"></a>3.2.6 <code>@Autowired</code></h6><ul><li><p>属性注解、方法注解（set方法），声明当前属性自动装配，默认byType</p></li><li><p>@Autowired(required &#x3D; false)  通过requried属性设置当前自动装配是否为必须（默认必须——如果没有找到类型与属性类型匹配的bean则抛出异常）</p></li><li><p>byType</p></li><li><p>ref引用</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazz</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;c2&quot;)</span> Clazz clazz)</span> &#123;<br>    <span class="hljs-built_in">this</span>.clazz = clazz;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-7-Resource"><a href="#3-2-7-Resource" class="headerlink" title="3.2.7 @Resource"></a>3.2.7 <code>@Resource</code></h6><ul><li>属性注解，也用于声明属性自动装配</li><li>默认装配方式为byName，如果根据byName没有找到对应的bean，则继续根据byType寻找对应的bean，根据byType如果依然没有找到Bean或者找到不止一个类型匹配的bean,则抛出异常。</li></ul><h2 id="四、代理设计模式"><a href="#四、代理设计模式" class="headerlink" title="四、代理设计模式"></a>四、代理设计模式</h2><h4 id="4-1-生活中的代理"><a href="#4-1-生活中的代理" class="headerlink" title="4.1 生活中的代理"></a>4.1 生活中的代理</h4><p><img src="/../imgs/1616999162162.png" alt="1616999162162"></p><p>代理设计模式的优点：将通用性的工作都交给代理对象完成，被代理对象只需专注自己的核心业务。</p><h4 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h4><blockquote><p>静态代理，代理类只能够为特定的类生产代理对象，不能代理任意类</p></blockquote><p><img src="/../imgs/1617001027208.png" alt="1617001027208"></p><p><strong>使用代理的好处</strong></p><p>1.被代理类中只用关注核心业务的实现，将通用的管理型逻辑（事务管理、日志管理）和业务逻辑分离</p><p>2.将通用的代码放在代理类中实现，提供了代码的复用性</p><p>3.通过在代理类添加业务逻辑，实现对原有业务逻辑的扩展（增强）</p><h4 id="4-3-动态代理"><a href="#4-3-动态代理" class="headerlink" title="4.3 动态代理"></a>4.3 动态代理</h4><blockquote><p>动态代理，几乎可以为所有的类产生代理对象</p><p>动态代理的实现方式有2种：</p><ul><li>JDK动态代理</li><li>CGLib动态大力</li></ul></blockquote><h6 id="4-3-1-JDK动态代理"><a href="#4-3-1-JDK动态代理" class="headerlink" title="4.3.1 JDK动态代理"></a>4.3.1 JDK动态代理</h6><ul><li>JDK动态代理类实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * JDK动态代理：是通过被代理对象实现的接口产生其代理对象的</span><br><span class="hljs-comment"> * 1.创建一个类，实现InvocationHandler接口，重写invoke方法</span><br><span class="hljs-comment"> * 2.在类种定义一个Object类型的变量，并提供这个变量的有参构造器，用于将被代理对象传递进来</span><br><span class="hljs-comment"> * 3.定义getProxy方法，用于创建并返回代理对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">//被代理对象</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JDKDynamicProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-comment">//产生代理对象，返回代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.获取被代理对象的类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> obj.getClass().getClassLoader();<br>        <span class="hljs-comment">//2.获取被代理对象的类实现的接口</span><br>        Class&lt;?&gt;[] interfaces = obj.getClass().getInterfaces();<br>        <span class="hljs-comment">//3.产生代理对象(通过被代理对象的类加载器及实现的接口)</span><br>        <span class="hljs-comment">//第一个参数：被代理对象的类加载器</span><br>        <span class="hljs-comment">//第二个参数：被代理对象实现的接口</span><br>        <span class="hljs-comment">//第三个参数：使用产生代理对象调用方法时，用于拦截方法执行的处理器</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(classLoader, interfaces,<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        begin();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> method.invoke(obj,args);  <span class="hljs-comment">//执行method方法（insert）</span><br>        commit();<br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;----------开启事务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;----------提交事务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//创建被代理对象</span><br><span class="hljs-type">BookDAOImpl</span> <span class="hljs-variable">bookDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDAOImpl</span>();<br><span class="hljs-type">StudentDAOImpl</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentDAOImpl</span>();<br><br><span class="hljs-comment">//创建动态代理类对象，并将被代理对象传递到代理类中赋值给obj</span><br><span class="hljs-type">JDKDynamicProxy</span> <span class="hljs-variable">jdkDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKDynamicProxy</span>(studentDAO);<br><br><span class="hljs-comment">//proxy就是产生的代理对象:产生的代理对象可以强转成被代理对象实现的接口类型</span><br><span class="hljs-type">GenaralDAO</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (GenaralDAO)jdkDynamicProxy.getProxy();<br><br><span class="hljs-comment">//使用代理对象调用方法，并不会执行调用的方法，而是进入到创建代理对象时指定的InvocationHandler类种的invoke方法</span><br><span class="hljs-comment">//调用的方法作为一个Method参数，传递给了invoke方法</span><br>proxy.insert(student);<br></code></pre></td></tr></table></figure><h6 id="4-3-2-CGLib动态代理"><a href="#4-3-2-CGLib动态代理" class="headerlink" title="4.3.2 CGLib动态代理"></a>4.3.2 CGLib动态代理</h6><blockquote><p>由于JDK动态代理是通过被代理类实现的接口来创建代理对象的，因此JDK动态代理只能代理实现了接口的类的对象。如果一个类没有实现任何接口，该如何产生代理对象呢？</p><p>CGLib动态代理，是通过创建被代理类的子类来创建代理对象的，因此即使没有实现任何接口的类也可以通过CGLib产生代理对象</p><p>CGLib动态代理不能为final类创建代理对象</p></blockquote><ul><li>添加CGLib的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>CGLib动态代理实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.添加cglib依赖</span><br><span class="hljs-comment"> * 2.创建一个类，实现MethodInterceptor接口，同时实现接口中的intercept方法</span><br><span class="hljs-comment"> * 3.在类中定义一个Object类型的变量，并提供这个变量的有参构造器，用于传递被代理对象</span><br><span class="hljs-comment"> * 4.定义getProxy方法创建并返回代理对象（代理对象是通过创建被代理类的子类来创建的）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLibDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CGLibDynamicProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(obj.getClass());<br>        enhancer.setCallback(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> enhancer.create();<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        begin();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> method.invoke(obj,objects); <span class="hljs-comment">//通过反射调用被代理类的方法</span><br>        commit();<br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;----------开启事务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;----------提交事务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建被代理对象</span><br><span class="hljs-type">BookDAOImpl</span> <span class="hljs-variable">bookDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDAOImpl</span>();<br><span class="hljs-type">StudentDAOImpl</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentDAOImpl</span>();<br><br><span class="hljs-comment">//通过cglib动态代理类创建代理对象</span><br><span class="hljs-type">CGLibDynamicProxy</span> <span class="hljs-variable">cgLibDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLibDynamicProxy</span>(bookDAO);<br><span class="hljs-comment">//代理对象实际上是被代理对象子类，因此代理对象可直接强转为被代理类类型</span><br><span class="hljs-type">BookDAOImpl</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (BookDAOImpl) cgLibDynamicProxy.getProxy();<br><br><span class="hljs-comment">//使用对象调用方法，实际上并没有执行这个方法，而是执行了代理类中的intercept方法，将当前调用的方法以及方法中的参数传递到intercept方法</span><br>proxy.update();<br></code></pre></td></tr></table></figure><h2 id="五、Spring-AOP"><a href="#五、Spring-AOP" class="headerlink" title="五、Spring AOP"></a>五、Spring AOP</h2><h4 id="5-1-AOP-概念"><a href="#5-1-AOP-概念" class="headerlink" title="5.1 AOP 概念"></a>5.1 AOP 概念</h4><blockquote><p>Aspect Oriented Programming 面向切面编程，是一种利用“横切”的技术（底层实现就是动态代理），对原有的业务逻辑进行拦截，并且可以在这个拦截的横切面上添加特定的业务逻辑，对原有的业务进行增强。</p><p>基于动态代理实现在不改变原有业务的情况下对业务逻辑进行增强</p></blockquote><p><img src="/../imgs/1617008695615.png" alt="1617008695615"></p><h4 id="5-2-Spring-AOP框架部署"><a href="#5-2-Spring-AOP框架部署" class="headerlink" title="5.2 Spring AOP框架部署"></a>5.2 Spring AOP框架部署</h4><h6 id="5-2-1-创建Maven项目"><a href="#5-2-1-创建Maven项目" class="headerlink" title="5.2.1 创建Maven项目"></a>5.2.1 创建Maven项目</h6><h6 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2 添加依赖"></a>5.2.2 添加依赖</h6><ul><li>context</li><li>aspects</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-2-3-创建spring配置文件"><a href="#5-2-3-创建spring配置文件" class="headerlink" title="5.2.3 创建spring配置文件"></a>5.2.3 创建spring配置文件</h6><ul><li>需要引入aop的命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-AOP配置—基于XML"><a href="#5-3-AOP配置—基于XML" class="headerlink" title="5.3 AOP配置—基于XML"></a>5.3 AOP配置—基于XML</h4><blockquote><p>在DAO的方法添加开启事务和提交事务的逻辑</p></blockquote><h6 id="5-3-1-创建一个类，定义要添加的业务逻辑"><a href="#5-3-1-创建一个类，定义要添加的业务逻辑" class="headerlink" title="5.3.1 创建一个类，定义要添加的业务逻辑"></a>5.3.1 创建一个类，定义要添加的业务逻辑</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxManager</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------开启事务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------提交事务&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-3-2-配置aop"><a href="#5-3-2-配置aop" class="headerlink" title="5.3.2 配置aop"></a>5.3.2 配置aop</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDAO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.dao.BookDAOImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentDAO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.dao.StudentDAOImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!----&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.utils.TxManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--声明切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_all&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.*.*(..))&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--声明txManager为切面类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;txManager&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;begin&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_all&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;commit&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_all&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>AOP开发步骤</code>：</p><p>1.创建切面类，在切面类定义切点方法</p><p>2.将切面类配置给Spring容器</p><p>3.声明切入点</p><p>4.配置AOP的通知策略</p><h4 id="5-4-切入点的声明"><a href="#5-4-切入点的声明" class="headerlink" title="5.4 切入点的声明"></a>5.4 切入点的声明</h4><h6 id="5-4-1-各种切入点声明方式"><a href="#5-4-1-各种切入点声明方式" class="headerlink" title="5.4.1 各种切入点声明方式"></a>5.4.1 各种切入点声明方式</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用aop:pointcut标签声明切入点：切入点可以是一个方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_insert&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--BookDAOImpl类中所有无参数无返回值的方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_pc1&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(void com.qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--BookDAOImpl类中所有无返回值的方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_pc2&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(void com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--BookDAOImpl类中所有无参数的方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_pc3&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--BookDAOImpl类中所有方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_pc4&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--dao包中所有类中的所有方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc5&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.*.*(..))&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--dao包中所有类中的insert方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc6&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.*.insert(..))&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--dao包中所有类中的insert方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc7&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *(..))&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-4-2-AOP使用注意事项"><a href="#5-4-2-AOP使用注意事项" class="headerlink" title="5.4.2 AOP使用注意事项"></a>5.4.2 AOP使用注意事项</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果要使用Spring aop面向切面编程，调用切入点方法的对象必须通过Spring容器获取</span><br><span class="hljs-comment">//如果一个类中的方法被声明为切入点并且织入了切点之后，通过Spring容器获取该类对象，实则获取到的是一个代理对象</span><br><span class="hljs-comment">//如果一个类中的方法没有被声明为切入点，通过Spring容器获取的就是这个类真实创建的对象</span><br><span class="hljs-comment">//BookServiceImpl bookService = new BookServiceImpl();</span><br><span class="hljs-type">BookServiceImpl</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookServiceImpl) context.getBean(<span class="hljs-string">&quot;bookServiceImpl&quot;</span>);<br>bookService.addBook();<br></code></pre></td></tr></table></figure><h4 id="5-5-AOP通知策略"><a href="#5-5-AOP通知策略" class="headerlink" title="5.5 AOP通知策略"></a>5.5 AOP通知策略</h4><blockquote><p> AOP通知策略：就是声明将切面类中的切点方法如何织入到切入点</p><ul><li>before</li><li>after</li><li>after-throwing</li><li>after-returning</li><li>around</li></ul></blockquote><h6 id="5-5-1-定义切面类"><a href="#5-5-1-定义切面类" class="headerlink" title="5.5.1 定义切面类"></a>5.5.1 定义切面类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method2&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method3&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method4</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method4&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知的切点方法，必须准守如下的定义规则：</span><br>    <span class="hljs-comment">//1.必须带有一个ProceedingJoinPoint类型的参数</span><br>    <span class="hljs-comment">//2.必须有Object类型的返回值</span><br>    <span class="hljs-comment">//3.在前后增强的业务逻辑之间执行Object v = point.proceed();</span><br>    <span class="hljs-comment">//4.方法最后返回v</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">method5</span><span class="hljs-params">(ProceedingJoinPoint point)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method5---before&quot;</span>);<br>        <span class="hljs-comment">//此代码的执行，就表示切入点方法的执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> point.proceed();<br>        System.out.println(<span class="hljs-string">&quot;~~~~~~~method5---after&quot;</span>);<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-5-2-配置切面类"><a href="#5-5-2-配置切面类" class="headerlink" title="5.5.2 配置切面类"></a>5.5.2 配置切面类</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qfedu.utils.MyAspect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用aop:pointcut标签声明切入点：切入点可以是一个方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book_insert&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--aop:before 前置通知，切入到指定切入点之前--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;method1&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--aop:after 后置通知，切入到指定切入点之后--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;method2&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--aop:after-throwing 异常通知，切入点抛出异常之后--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;method3&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--aop:after-returning 方法返回值返回之后，对于一个Java方法而言return返回值也是方法的一部分</span><br><span class="hljs-comment">             因此“方法返回值返回之后”和“方法执行结束”是同一个时间点，随意after 和 after-returning根据配置</span><br><span class="hljs-comment">             的顺序决定执行顺序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;method4&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;method5&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;book_insert&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、Spring-AOP-注解配置"><a href="#六、Spring-AOP-注解配置" class="headerlink" title="六、Spring AOP 注解配置"></a>六、Spring AOP 注解配置</h2><h4 id="6-1-Spring-AOP-注解配置框架部署"><a href="#6-1-Spring-AOP-注解配置框架部署" class="headerlink" title="6.1 Spring AOP 注解配置框架部署"></a>6.1 Spring AOP 注解配置框架部署</h4><h6 id="6-1-1-创建Maven工程"><a href="#6-1-1-创建Maven工程" class="headerlink" title="6.1.1 创建Maven工程"></a>6.1.1 创建Maven工程</h6><h6 id="6-1-2-添加Spring依赖"><a href="#6-1-2-添加Spring依赖" class="headerlink" title="6.1.2 添加Spring依赖"></a>6.1.2 添加Spring依赖</h6><ul><li>context</li><li>aspects</li></ul><h6 id="6-1-3-Spring配置文件"><a href="#6-1-3-Spring配置文件" class="headerlink" title="6.1.3 Spring配置文件"></a>6.1.3 Spring配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:annotation-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qfedu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  基于注解配置的aop代理  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-2-AOP注解配置案例"><a href="#6-2-AOP注解配置案例" class="headerlink" title="6.2 AOP注解配置案例"></a>6.2 AOP注解配置案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionManager</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.qfedu.dao.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pc1</span><span class="hljs-params">()</span>&#123;&#125;<br><br><br>    <span class="hljs-meta">@Before(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~开启事务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~~提交事务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">printExecuteTime</span><span class="hljs-params">(ProceedingJoinPoint point)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> point.proceed();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;----time:&quot;</span>+(time2-time1));<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>注意</code>：注解使用虽然方便，但是只能在源码上添加注解，因此我们的自定义类提倡使用注解配置；但如果如果使用到第三方提供的类则需要通过xml配置形式完成配置。</p><h2 id="七、Spring整合MyBatis"><a href="#七、Spring整合MyBatis" class="headerlink" title="七、Spring整合MyBatis"></a>七、Spring整合MyBatis</h2><blockquote><p>Spring两大核心思想：IoC 和 AOP</p><p>IoC : 控制反转，Spring容器可以完成对象的创建、属性注入、对象管理等工作</p><p>AOP : 面向切面，在不修改原有业务逻辑的情况下，实现原有业务的增强</p></blockquote><h4 id="7-1-Spring可以对MyBatis提供哪些支持？"><a href="#7-1-Spring可以对MyBatis提供哪些支持？" class="headerlink" title="7.1 Spring可以对MyBatis提供哪些支持？"></a>7.1 Spring可以对MyBatis提供哪些支持？</h4><ul><li><p><strong>IoC支持</strong> SpringIoC 可以为MyBatis完成DataSource、SqlSessionFactory、SqlSession以及DAO对象的创建</p></li><li><p><strong>AOP支持</strong>使用Spring提供的事务管理切面类完成对MyBatis数据库操作中的事务管理</p></li></ul><h4 id="7-2-Spring整合MyBatis准备工作"><a href="#7-2-Spring整合MyBatis准备工作" class="headerlink" title="7.2 Spring整合MyBatis准备工作"></a>7.2 Spring整合MyBatis准备工作</h4><h6 id="7-2-1-创建Maven工程"><a href="#7-2-1-创建Maven工程" class="headerlink" title="7.2.1 创建Maven工程"></a>7.2.1 创建Maven工程</h6><h6 id="7-2-2-部署MyBatis框架"><a href="#7-2-2-部署MyBatis框架" class="headerlink" title="7.2.2 部署MyBatis框架"></a>7.2.2 部署MyBatis框架</h6><ul><li>添加依赖<ul><li>Mysql驱动</li><li>mybatis</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建MyBatis配置文件(创建配置文件之后无需进行任何配置)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="7-2-3-部署Spring框架"><a href="#7-2-3-部署Spring框架" class="headerlink" title="7.2.3 部署Spring框架"></a>7.2.3 部署Spring框架</h6><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建Spring配置文件：applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="7-2-4-添加Spring整合MyBatis的依赖"><a href="#7-2-4-添加Spring整合MyBatis的依赖" class="headerlink" title="7.2.4 添加Spring整合MyBatis的依赖"></a>7.2.4 添加Spring整合MyBatis的依赖</h6><ul><li>mybatis-spring  就是mybatis提供的兼容Spring的补丁</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-3-Spring整合MyBatis整合IoC配置"><a href="#7-3-Spring整合MyBatis整合IoC配置" class="headerlink" title="7.3 Spring整合MyBatis整合IoC配置"></a>7.3 Spring整合MyBatis整合IoC配置</h4><h6 id="7-3-1-整合Druid连接池"><a href="#7-3-1-整合Druid连接池" class="headerlink" title="7.3.1 整合Druid连接池"></a>7.3.1 整合Druid连接池</h6><ul><li>添加druid的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建druid.properties属性文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">druid.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span><br><span class="hljs-attr">druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">druid.password</span>=<span class="hljs-string">admin123</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 连接池参数</span><br><span class="hljs-attr">druid.pool.init</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">druid.pool.minIdle</span>=<span class="hljs-string">3</span><br><span class="hljs-attr">druid.pool.maxActive</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">druid.pool.timeout</span>=<span class="hljs-string">30000</span><br></code></pre></td></tr></table></figure><ul><li>在applicationContext.xml中配置DruidDataSource</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载druid.properties属性文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:druid.properties&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--依赖Spring容器完成数据源DataSource的创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="7-3-2-整合MyBatis—创建SqlSessionFactory"><a href="#7-3-2-整合MyBatis—创建SqlSessionFactory" class="headerlink" title="7.3.2 整合MyBatis—创建SqlSessionFactory"></a>7.3.2 整合MyBatis—创建SqlSessionFactory</h6><blockquote><p>依赖Spring容器创建MyBatis的SqlSessionFactory对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖Spring容器完成MyBatis的SqlSessionFactory对象的创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置mapper文件的路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置需要定义别名的实体类的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.qfedu.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--可选：配置MyBatis的主配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="7-3-3-整合MyBatis-创建Mapper"><a href="#7-3-3-整合MyBatis-创建Mapper" class="headerlink" title="7.3.3 整合MyBatis-创建Mapper"></a>7.3.3 整合MyBatis-创建Mapper</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载dao包中的所有DAO接口，通过sqlSessionFactory获取SqlSession，然后创建所有的DAO接口对象，存储在Spring容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.qfedu.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-4-Spring整合MyBatis整合AOP配置"><a href="#7-4-Spring整合MyBatis整合AOP配置" class="headerlink" title="7.4 Spring整合MyBatis整合AOP配置"></a>7.4 Spring整合MyBatis整合AOP配置</h4><blockquote><p>使用Spring提供的事务管理切面类 完成DAO中增删改操作的事务管理</p></blockquote><h6 id="7-4-1-事务的隔离级别"><a href="#7-4-1-事务的隔离级别" class="headerlink" title="7.4.1 事务的隔离级别"></a>7.4.1 事务的隔离级别</h6><blockquote><p> isolation 设置事务隔离级别：READ_UNCOMMITTED  ,READ_COMMITTED , REPEATABLE_READ , SERIALIZABLE</p></blockquote><p><img src="/../imgs/1617093621853.png" alt="1617093621853"></p><h6 id="7-4-2-事务的传播机制"><a href="#7-4-2-事务的传播机制" class="headerlink" title="7.4.2 事务的传播机制"></a>7.4.2 事务的传播机制</h6><p> propagation 设置事务的传播机制    </p><ul><li><p>REQUIRED 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则加入到事务中。    </p></li><li><p>SUPPORTS 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则加入到事务中。</p></li><li><p>REQUIRES_NEW 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则将当前事务挂起。 </p></li><li><p>NOT_SUPPORTED 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则将当前事务挂起。    </p></li><li><p>NEVER 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则抛出异常。    </p></li><li><p>MANDATORY 如果上层方法已经存在事务，则加入到事务中执行；如果不存在事务则抛出异常。    </p></li><li><p>NESTED 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则嵌套到当前事务中。</p></li></ul><h6 id="7-4-3-Spring-AOP事务管理配置—XML配置"><a href="#7-4-3-Spring-AOP事务管理配置—XML配置" class="headerlink" title="7.4.3 Spring AOP事务管理配置—XML配置"></a>7.4.3 Spring AOP事务管理配置—XML配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.将Spring提供的事务管理配置配置给Spring容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2.通过Spring jdbc提供的 tx标签，声明事务管理策略--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;insert*&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--3.将事务管理策略以AOP配置 应用于DAO操作方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;crud&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qfedu.service.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;crud&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="7-4-4-Spring-AOP事务管理配置—注解配置"><a href="#7-4-4-Spring-AOP事务管理配置—注解配置" class="headerlink" title="7.4.4 Spring AOP事务管理配置—注解配置"></a>7.4.4 Spring AOP事务管理配置—注解配置</h6><ul><li>在applicationContext.xml中配置事务管理，声明使用注解方式进行事务配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用注解进行事务管理前提是 IoC需要进行注解配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qfedu&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--1.将Spring提供的事务管理配置配置给Spring容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2.声明使用注解完成事务配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在需要Spring进行事务管理的方法上添加<code>@Transactional</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.REPEATABLE_READ ,propagation = Propagation.SUPPORTS )</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">listUsers</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> userDAO.queryUsers();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、基于Spring的单元测试"><a href="#八、基于Spring的单元测试" class="headerlink" title="八、基于Spring的单元测试"></a>八、基于Spring的单元测试</h2><blockquote><p>如果想要使用Spring容器实现属性注入、实现AOP面向切面编程，对象必须通过Spring容器获取；为了便于Spring环境下的测试，Spring提供了test组件，专门针对Spring环境进行单元测试。</p></blockquote><h4 id="8-1-添加依赖"><a href="#8-1-添加依赖" class="headerlink" title="8.1 添加依赖"></a>8.1 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.13.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-2-编写单元测试类"><a href="#8-2-编写单元测试类" class="headerlink" title="8.2 编写单元测试类"></a>8.2 编写单元测试类</h4><h6 id="8-2-1-创建一个单元测试类"><a href="#8-2-1-创建一个单元测试类" class="headerlink" title="8.2.1 创建一个单元测试类"></a>8.2.1 创建一个单元测试类</h6><p>略</p><h6 id="8-2-2-添加注解"><a href="#8-2-2-添加注解" class="headerlink" title="8.2.2 添加注解"></a>8.2.2 添加注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.通过@RunWith 声明当前测试类位于Spring容器环境（被Spring容器管理）</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment">//2.通过@ContextConfiguration 声明当前测试环境的Spring容器运行时加载的配置文件</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImplTest</span> &#123;<br><br>    <span class="hljs-comment">//因为当前测试类是基于Spring容器运行的，当前测试类的对象是通过Spring容器创建的</span><br>    <span class="hljs-comment">//因此可以通过Spring容器实现属性的注入</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userServiceImpl2;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userServiceImpl;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userServiceImpl.listUsers();<br>        System.out.println(users);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/02/&#39;Mybatis%E7%9A%84%E5%AD%A6%E4%B9%A0&#39;/"/>
    <url>/2023/05/02/&#39;Mybatis%E7%9A%84%E5%AD%A6%E4%B9%A0&#39;/</url>
    
    <content type="html"><![CDATA[<h2 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h2><h4 id="1-1-框架概念"><a href="#1-1-框架概念" class="headerlink" title="1.1 框架概念"></a>1.1 框架概念</h4><blockquote><p>框架，就是软件的半成品，完成了软件开发过程中的通用操作，程序员只需很少或者不用进行加工就能够实现特定的功能，从而简化开发人员在软件开发中的步骤，提高开发效率。</p></blockquote><h4 id="1-2-常用框架"><a href="#1-2-常用框架" class="headerlink" title="1.2  常用框架"></a>1.2  常用框架</h4><ul><li>MVC框架：简化了Servlet的开发步骤<ul><li>Struts</li><li>Struts2</li><li><code>SpringMVC</code></li></ul></li><li>持久层框架：完成数据库操作的框架<ul><li>apache DBUtils</li><li>Hibernate</li><li>Spring JPA</li><li><code>MyBatis</code></li><li>EJB3.0</li></ul></li><li>胶水框架：<code>Spring</code></li></ul><p>SSM   Spring SpringMVC MyBatis</p><p>SSH   Spring Struts2 Hibernate</p><h4 id="1-3-MyBatis介绍"><a href="#1-3-MyBatis介绍" class="headerlink" title="1.3 MyBatis介绍"></a>1.3 MyBatis介绍</h4><blockquote><p>MyBatis是一个<code>半自动</code>的<code>ORM</code>框架</p><p>ORM（Object Relational Mapping）对象关系映射，将Java中的一个对象与数据表中一行记录一一对应。</p><p>ORM框架提供了实体类与数据表的映射关系，通过映射文件的配置，实现对象的持久化。</p></blockquote><ul><li>MyBatis的前身是iBatis，iBatis是Apache软件基金会提供的一个开源项目</li><li>2010年iBatis迁移到Google code，正式更名为MyBatis</li><li>2013年迁移到Github托管</li><li>MyBatis特点：<ul><li>支持自定义SQL、存储过程</li><li>对原有的JDBC进行了封装，几乎消除了所有JDBC代码，让开发者只需关注SQL本身</li><li>支持XML和注解配置方式自定完成ORM操作，实现结果映射</li></ul></li></ul><h2 id="二、MyBatis框架部署"><a href="#二、MyBatis框架部署" class="headerlink" title="二、MyBatis框架部署"></a>二、MyBatis框架部署</h2><blockquote><p>框架部署，就是将框架引入到我们的项目中</p></blockquote><h4 id="2-1-创建Maven项目"><a href="#2-1-创建Maven项目" class="headerlink" title="2.1 创建Maven项目"></a>2.1 创建Maven项目</h4><ul><li>Java工程</li><li>Web工程</li></ul><h4 id="2-2-在项目中添加MyBatis依赖"><a href="#2-2-在项目中添加MyBatis依赖" class="headerlink" title="2.2 在项目中添加MyBatis依赖"></a>2.2 在项目中添加MyBatis依赖</h4><ul><li><p>在pom.xml中添加依赖</p><ul><li>mybatis    </li><li>mysql driver</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-创建MyBatis配置文件"><a href="#2-3-创建MyBatis配置文件" class="headerlink" title="2.3 创建MyBatis配置文件"></a>2.3 创建MyBatis配置文件</h4><ul><li><p>创建自定义模板：选择resources—-右键New—-Edit File Templates</p><p><img src="/../../imgs/1616144597211.png" alt="1616144597211"></p></li><li><p>在resources中创建名为<code>mybatis-config.xml</code>的文件</p></li><li><p>在<code>mybatis-config.xml</code>文件配置数据库连接信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 在environments配置数据库连接信息 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在environments标签中可以定义多个environment标签，每个environment标签可以定义一套连接配置 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- default属性，用来指定使用哪个environment标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--transactionManager标签用于配置数据库管理方式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--dataSource标签就是用来配置数据库连接信息 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_2010_fmwy?characterEncoding=utf-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin123&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="三、MyBatis框架使用"><a href="#三、MyBatis框架使用" class="headerlink" title="三、MyBatis框架使用"></a>三、MyBatis框架使用</h2><blockquote><p>案例：学生信息的数据库操作</p></blockquote><h4 id="3-1-创建数据表"><a href="#3-1-创建数据表" class="headerlink" title="3.1 创建数据表"></a>3.1 创建数据表</h4><table><thead><tr><th>tb_students</th></tr></thead><tbody><tr><td><img src="/../imgs/1616145569298.png" alt="1616145569298"></td></tr></tbody></table><h4 id="3-2-创建实体类"><a href="#3-2-创建实体类" class="headerlink" title="3.2 创建实体类"></a>3.2 创建实体类</h4><table><thead><tr><th>Student.java</th></tr></thead><tbody><tr><td><img src="/../imgs/1616145876310.png" alt="1616145876310"></td></tr></tbody></table><h4 id="3-3-创建DAO接口，定义操作方法"><a href="#3-3-创建DAO接口，定义操作方法" class="headerlink" title="3.3 创建DAO接口，定义操作方法"></a>3.3 创建DAO接口，定义操作方法</h4><table><thead><tr><th>StudentDAO.java</th></tr></thead><tbody><tr><td><img src="/../imgs/1616147015300.png" alt="1616147015300"></td></tr></tbody></table><h4 id="3-4-创建DAO接口的映射文件"><a href="#3-4-创建DAO接口的映射文件" class="headerlink" title="3.4 创建DAO接口的映射文件"></a>3.4 创建DAO接口的映射文件</h4><ul><li>在<code>resources</code>目录下，新建名为<code>mappers</code>文件夹</li><li>在<code>mappers</code>中新建名为<code>StudentMapper.xml</code>的映射文件（根据模板创建）</li><li>在映射文件中对DAO中定义的方法进行实现：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--mapper文件相当于DAO接口的‘实现类’，namespace属性要指定`实现`DAO接口的全限定名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qfedu.dao.StudentDAO&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into tb_students(stu_num,stu_name,stu_gender,stu_age)<br>        values(#&#123;stuNum&#125;,#&#123;stuName&#125;,#&#123;stuGender&#125;,#&#123;stuAge&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteStudent&quot;</span>&gt;</span><br>        delete from tb_students where stu_num=#&#123;stuNum&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-将映射文件添加到主配置文件"><a href="#3-5-将映射文件添加到主配置文件" class="headerlink" title="3.5 将映射文件添加到主配置文件"></a>3.5 将映射文件添加到主配置文件</h4><table><thead><tr><th>mybatis-config.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616146926729.png" alt="1616146926729"></td></tr></tbody></table><h2 id="四、单元测试"><a href="#四、单元测试" class="headerlink" title="四、单元测试"></a>四、单元测试</h2><h4 id="4-1-添加单元测依赖"><a href="#4-1-添加单元测依赖" class="headerlink" title="4.1 添加单元测依赖"></a>4.1 添加单元测依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-创建单元测试类"><a href="#4-2-创建单元测试类" class="headerlink" title="4.2 创建单元测试类"></a>4.2 创建单元测试类</h4><table><thead><tr><th>在被测试类名后alt+insert —  选择Test</th></tr></thead><tbody><tr><td><img src="/../imgs/1616147095936.png" alt="1616147095936"></td></tr><tr><td><img src="/../imgs/1616147180562.png" alt="1616147180562"></td></tr></tbody></table><h4 id="4-3-测试代码"><a href="#4-3-测试代码" class="headerlink" title="4.3 测试代码"></a>4.3 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.dao;<br><br><span class="hljs-keyword">import</span> com.qfedu.pojo.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDAOTest</span> &#123;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertStudent</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加载mybatis配置文件</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>            <span class="hljs-comment">//会话工厂</span><br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> builder.build(is);<br>            <span class="hljs-comment">//会话（连接）</span><br>            <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>            <span class="hljs-comment">//通过会话获取DAO对象</span><br>            <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentDAO.class);<br>            <span class="hljs-comment">//测试StudentDAO中的方法</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> studentDAO.insertStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;10001&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">21</span>));<br>            <span class="hljs-comment">//需要手动提交</span><br>            sqlSession.commit();<br>            System.out.println(i);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、MyBatis的CRUD操作"><a href="#五、MyBatis的CRUD操作" class="headerlink" title="五、MyBatis的CRUD操作"></a>五、MyBatis的CRUD操作</h2><blockquote><p>案例:学生信息的增删查改</p></blockquote><h4 id="5-1-添加操作"><a href="#5-1-添加操作" class="headerlink" title="5.1 添加操作"></a>5.1 添加操作</h4><p>略</p><h4 id="5-2-删除操作"><a href="#5-2-删除操作" class="headerlink" title="5.2 删除操作"></a>5.2 删除操作</h4><blockquote><p>根据学号删除一条学生信息</p></blockquote><ul><li>在StudentDAO中定义删除方法</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616463209812.png" alt="1616463209812"></td></tr></tbody></table><ul><li>在StudentMapper.xml中对接口方法进行“实现”</li></ul><table><thead><tr><th>StudentMapper.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616463282187.png" alt="1616463282187"></td></tr></tbody></table><ul><li>测试：在StudentDAO的测试类中添加测试方法</li></ul><table><thead><tr><th>StudentDAOTest</th></tr></thead><tbody><tr><td><img src="/../imgs/1616464771784.png" alt="1616464771784"></td></tr></tbody></table><h4 id="5-3-修改操作"><a href="#5-3-修改操作" class="headerlink" title="5.3 修改操作"></a>5.3 修改操作</h4><blockquote><p>根据学生学号，修改其他字段信息</p></blockquote><ul><li>在StudentDAO接口中定义修改方法</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616465607290.png" alt="1616465607290"></td></tr></tbody></table><ul><li>在StudentMapper.xml中“实现”接口中定义的修改方法</li></ul><table><thead><tr><th>StudentMapper.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616465639080.png" alt="1616465639080"></td></tr></tbody></table><ul><li>单元测试</li></ul><table><thead><tr><th>StudentDAOTest</th></tr></thead><tbody><tr><td><img src="/../imgs/1616465667657.png" alt="1616465667657"></td></tr></tbody></table><h4 id="5-4-查询操作-查询所有"><a href="#5-4-查询操作-查询所有" class="headerlink" title="5.4 查询操作-查询所有"></a>5.4 查询操作-查询所有</h4><ul><li>在StudentDAO接口定义操作方法</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616467216382.png" alt="1616467216382"></td></tr></tbody></table><ul><li>在StudentMapper.xml中“实现”DAO中定义的方法</li></ul><table><thead><tr><th>StudentMapper.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616467314082.png" alt="1616467314082"></td></tr></tbody></table><ul><li>单元测试</li></ul><table><thead><tr><th>StudentDAOTest</th></tr></thead><tbody><tr><td><img src="/../imgs/1616467336432.png" alt="1616467336432"></td></tr></tbody></table><h4 id="5-5-查询操作-查询一条记录"><a href="#5-5-查询操作-查询一条记录" class="headerlink" title="5.5 查询操作-查询一条记录"></a>5.5 查询操作-查询一条记录</h4><blockquote><p> 根据学号查询一个学生信息</p></blockquote><ul><li>在StudentDAO接口中定义方法</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616469113754.png" alt="1616469113754"></td></tr></tbody></table><ul><li>在StudentDAOMapper.xml中配置StudentDAO接口的方法实现——SQL</li></ul><table><thead><tr><th>StudentDAOMapper.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616469142604.png" alt="1616469142604"></td></tr></tbody></table><ul><li>单元测试</li></ul><table><thead><tr><th>StudentDAOTest</th></tr></thead><tbody><tr><td><img src="/../imgs/1616469154258.png" alt="1616469154258"></td></tr></tbody></table><h4 id="5-6-查询操作-多参数查询"><a href="#5-6-查询操作-多参数查询" class="headerlink" title="5.6 查询操作-多参数查询"></a>5.6 查询操作-多参数查询</h4><blockquote><p>分页查询（参数  start ， pageSize）</p></blockquote><ul><li>在StudentDAO中定义操作方法，如果方法有多个参数，使用<code>@Param</code>注解声明参数的别名</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616470534343.png" alt="1616470534343"></td></tr></tbody></table><ul><li>在StudentMapper.xml配置sql时，使用<code>#&#123;别名&#125;</code>获取到指定的参数</li></ul><table><thead><tr><th>StudentMapper.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616470612608.png" alt="1616470612608"></td></tr></tbody></table><p><strong><code>注意</code></strong> 如果DAO操作方法没有通过@Param指定参数别名，在SQL中也可以通过<code>arg0,arg1...</code>或者<code>param1,param2,...</code>获取参数</p><h4 id="5-7-查询操作-查询总记录数"><a href="#5-7-查询操作-查询总记录数" class="headerlink" title="5.7 查询操作-查询总记录数"></a>5.7 查询操作-查询总记录数</h4><ul><li>在StudentDAO接口中定义操作方法</li></ul><table><thead><tr><th>StudentDAO</th></tr></thead><tbody><tr><td><img src="/../imgs/1616471133486.png" alt="1616471133486"></td></tr></tbody></table><ul><li>在StudentMapper.xml配置sql，通过resultType指定当前操作的返回类型为int</li></ul><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/../imgs/1616471056064.png" alt="1616471056064"></td></tr></tbody></table><h4 id="5-8-添加操作回填生成的主键"><a href="#5-8-添加操作回填生成的主键" class="headerlink" title="5.8 添加操作回填生成的主键"></a>5.8 添加操作回填生成的主键</h4><ul><li>StduentMapper.xml的添加操作标签——<code>insert</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- useGeneratedKeys 设置添加操作是否需要回填生成的主键 --&gt;</span><br><span class="hljs-comment">&lt;!-- keyProperty 设置回填的主键值赋值到参数对象的哪个属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuId&quot;</span>&gt;</span><br>    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)<br>    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、MyBatis工具类封装"><a href="#六、MyBatis工具类封装" class="headerlink" title="六、MyBatis工具类封装"></a>六、MyBatis工具类封装</h2><ul><li>MyBatisUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;SqlSession&gt;();<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>            factory = builder.build(is);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> local.get();<br>        <span class="hljs-keyword">if</span>(sqlSession == <span class="hljs-literal">null</span> )&#123;<br>            sqlSession = factory.openSession();<br>            local.set(sqlSession);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; c)</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> getSqlSession();<br>        <span class="hljs-keyword">return</span> sqlSession.getMapper(c);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、事务管理"><a href="#七、事务管理" class="headerlink" title="七、事务管理"></a>七、事务管理</h2><blockquote><p>SqlSession 对象</p><ul><li>getMapper(DAO.class) :  获取Mapper（DAO接口的实例）</li><li>事务管理</li></ul></blockquote><h4 id="7-1-手动提交事务"><a href="#7-1-手动提交事务" class="headerlink" title="7.1 手动提交事务"></a>7.1 手动提交事务</h4><ul><li><code>sqlSession.commit();</code>提交事务</li><li><code>sqlSession.rollback();</code>事务回滚</li></ul><p><strong>测试类中进行事务管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertStudent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MyBatisUtil.getSqlSession();<br>    <span class="hljs-comment">//1.当我们获取sqlSession对象时，就默认开启了事务</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//通过会话获取DAO对象</span><br>        <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentDAO.class);<br>        <span class="hljs-comment">//测试StudentDAO中的方法</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;10005&quot;</span>, <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">21</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> studentDAO.insertStudent(student);<br>        <span class="hljs-comment">//2.操作完成并成功之后，需要手动提交</span><br>        sqlSession.commit();<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        <span class="hljs-comment">//3.当操作出现异常，调用rollback进行回滚</span><br>        sqlSession.rollback();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务逻辑层手动事务管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MyBatisUtil.getSqlSession();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentDAO.class);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> studentDAO.insertStudent(student);<br>            b = i&gt;<span class="hljs-number">0</span>;<br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            sqlSession.rollback();<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-自动提交事务"><a href="#7-2-自动提交事务" class="headerlink" title="7.2 自动提交事务"></a>7.2 自动提交事务</h4><blockquote><p> 通过SqlSessionFactory调用openSession方法获取SqlSession对象时，可以通过参数设置事务是否自动提交：</p><ul><li><p>如果参数设置为true，表示自定提交事务： factory.openSession(true);</p></li><li><p>如果参数设置为false，或者不设置参数，表示手动提交：factory.openSession();&#x2F;factory.openSession(false);</p></li></ul></blockquote><p><strong>MyBatisUtil</strong>优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;SqlSession&gt;();<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>            factory = builder.build(is);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isAutoCommit)</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> local.get();<br>        <span class="hljs-keyword">if</span>(sqlSession == <span class="hljs-literal">null</span> )&#123;<br>            sqlSession = factory.openSession(isAutoCommit);<br>            local.set(sqlSession);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br><br>    <span class="hljs-comment">//手动事务管理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getSqlSession(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//自动事务提交</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt;T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; c)</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> getSqlSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> sqlSession.getMapper(c);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteStudent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> studentDAO.deleteStudent(<span class="hljs-string">&quot;10001&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务逻辑层自动事务管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> studentDAO.insertStudent(student);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> i&gt;<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、MyBatis主配置文件"><a href="#八、MyBatis主配置文件" class="headerlink" title="八、MyBatis主配置文件"></a>八、MyBatis主配置文件</h2><blockquote><p> mybatis-config.xml 是MyBatis框架的主配置文件，只要用于配置MyBatis数据源及属性信息</p></blockquote><h4 id="8-1-properties标签"><a href="#8-1-properties标签" class="headerlink" title="8.1 properties标签"></a>8.1 properties标签</h4><blockquote><p>用于设置键值对，或者加载属性文件</p></blockquote><ul><li>在resources目录下创建<code>jdbc.properties</code>文件，配置键值对如下：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mysql_driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">mysql_url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db_2010_fmwy?characterEncoding=utf-8</span><br><span class="hljs-attr">mysql_username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mysql_password</span>=<span class="hljs-string">admin123</span><br></code></pre></td></tr></table></figure><ul><li>在mybatis-config.xml中通过<code>properties</code>标签引用<code>jdbc.properties</code>文件;引入之后，在配置environment时可以直接使用jdbc.properties的key获取对应的value</li></ul><table><thead><tr><th>mybatis-config.xml</th></tr></thead><tbody><tr><td><img src="/../imgs/1616482928813.png" alt="1616482928813"></td></tr></tbody></table><h4 id="8-2-settings标签"><a href="#8-2-settings标签" class="headerlink" title="8.2 settings标签"></a>8.2 settings标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置mybatis的属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 启动二级缓存--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 启动延迟加载 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-typeAliases标签"><a href="#8-3-typeAliases标签" class="headerlink" title="8.3 typeAliases标签"></a>8.3 typeAliases标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--typeAliases标签用于给实体类取别名，在映射文件中可以直接使用别名来替代实体类的全限定名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.pojo.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAlias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.pojo.Book&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAlias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-4-plugins标签"><a href="#8-4-plugins标签" class="headerlink" title="8.4 plugins标签"></a>8.4 plugins标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-5-environments标签"><a href="#8-5-environments标签" class="headerlink" title="8.5 environments标签"></a>8.5 environments标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在environments配置数据库连接信息 --&gt;</span><br><span class="hljs-comment">&lt;!-- 在environments标签中可以定义多个environment标签，每个environment标签可以定义一套连接配置 --&gt;</span><br><span class="hljs-comment">&lt;!-- default属性，用来指定使用哪个environment标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  environment 标签用于配置数据库连接信息  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--transactionManager标签用于配置数据库管理方式</span><br><span class="hljs-comment">            type=&quot;JDBC&quot;  可以进行事务的提交和回滚操作</span><br><span class="hljs-comment">            type=&quot;MANAGED&quot; 依赖容器完成事务管理，本身不进行事务的提交和回滚操作 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--dataSource标签就是用来配置数据库连接信息 POOLED|UNPOOLED --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql_driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql_url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql_username&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql_password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-6-mappers标签"><a href="#8-6-mappers标签" class="headerlink" title="8.6 mappers标签"></a>8.6 mappers标签</h4><blockquote><p>加载映射配置（映射文件、DAO注解）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mappers标签用于载入映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/StudentMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="九、映射文件"><a href="#九、映射文件" class="headerlink" title="九、映射文件"></a>九、映射文件</h2><h4 id="9-1-MyBatis-Mapper初始化"><a href="#9-1-MyBatis-Mapper初始化" class="headerlink" title="9.1 MyBatis Mapper初始化"></a>9.1 MyBatis Mapper初始化</h4><blockquote><p>XML文件解析：读取xml文件中的标签配置封装到Java对象中</p></blockquote><p><img src="/../imgs/1616487875112.png" alt="1616487875112"></p><h4 id="9-2-mapper根标签"><a href="#9-2-mapper根标签" class="headerlink" title="9.2 mapper根标签"></a>9.2 mapper根标签</h4><blockquote><p>mapper文件相当于DAO接口的‘实现类’，namespace属性要指定<code>实现</code>DAO接口的全限定名</p></blockquote><h4 id="9-3-insert标签"><a href="#9-3-insert标签" class="headerlink" title="9.3 insert标签"></a>9.3 insert标签</h4><blockquote><p>声明添加操作（sql: insert …）</p><p><strong>常用属性</strong></p><p>id属性，绑定对应DAO接口中的方法</p><p>parameterType属性，用以指定接口中对应方法的参数类型（可省略）</p><p>useGeneratedKeys属性， 设置添加操作是否需要回填生成的主键</p><p>keyProperty属性，指定回填的id设置到参数对象中的哪个属性</p><p>timeout属性，设置此操作的超时时间，如果不设置则一直等待</p></blockquote><p><strong>主键回填</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuId&quot;</span>&gt;</span><br>    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)<br>    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>        select last_insert_id()<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)<br>    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-4-delete标签"><a href="#9-4-delete标签" class="headerlink" title="9.4 delete标签"></a>9.4 delete标签</h4><blockquote><p>声明删除操作</p></blockquote><h4 id="9-5-update标签"><a href="#9-5-update标签" class="headerlink" title="9.5 update标签"></a>9.5 update标签</h4><blockquote><p>声明修改操作</p></blockquote><h4 id="9-6-select标签"><a href="#9-6-select标签" class="headerlink" title="9.6 select标签"></a>9.6 select标签</h4><blockquote><p>声明查询操作</p><ul><li><p>id属性， 指定绑定方法的方法名</p></li><li><p>parameterType属性，设置参数类型</p></li><li><p>resultType属性，指定当前sql返回数据封装的对象类型（实体类）</p></li><li><p>resultMap属性，指定从数据表到实体类的字段和属性的对应关系</p></li><li><p>useCache属性，指定此查询操作是否需要缓存</p></li><li><p>timeout属性，设置超时时间</p></li></ul></blockquote><h4 id="9-7-resultMap标签"><a href="#9-7-resultMap标签" class="headerlink" title="9.7 resultMap标签"></a>9.7 resultMap标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- resultMap标签用于定义实体类与数据表的映射关系（ORM） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stu_num&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuNum&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stu_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stu_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuGender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stu_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuAge&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-8-cache标签"><a href="#9-8-cache标签" class="headerlink" title="9.8 cache标签"></a>9.8 cache标签</h4><blockquote><p>设置当前DAO进行数据库操作时的缓存属性设置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-9-sql和include"><a href="#9-9-sql和include" class="headerlink" title="9.9 sql和include"></a>9.9 sql和include</h4><blockquote><p>SQL片段</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wanglaoji&quot;</span>&gt;</span>sid , stu_num , stu_name , stu_gender , stu_age<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;listStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentMap&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;wanglaoji&quot;</span>/&gt;</span> from tb_students<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十、分页插件"><a href="#十、分页插件" class="headerlink" title="十、分页插件"></a>十、分页插件</h2><blockquote><p>分页插件是一个独立于MyBatis框架之外的第三方插件;</p></blockquote><h4 id="10-1-添加分页插件的依赖"><a href="#10-1-添加分页插件的依赖" class="headerlink" title="10.1 添加分页插件的依赖"></a>10.1 添加分页插件的依赖</h4><blockquote><p>PageHelper</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- pagehelper分页插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-2-配置插件"><a href="#10-2-配置插件" class="headerlink" title="10.2 配置插件"></a>10.2 配置插件</h4><blockquote><p>在mybatis的主配置文件<code>mybatis-config.xml</code>中通过<code>plugins</code>标签进行配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-3-分页实例"><a href="#10-3-分页实例" class="headerlink" title="10.3 分页实例"></a>10.3 分页实例</h4><blockquote><p>对学生信息进行分页查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testListStudentsByPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(StudentDAO.class); <span class="hljs-comment">//sqlSession</span><br>    PageHelper.startPage(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>    List&lt;Student&gt; students = studentDAO.listStudents();<br>    PageInfo&lt;Student&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;Student&gt;(students);<br>    <span class="hljs-comment">//pageInfo中就包含了数据及分页信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>带条件分页</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testListStudentsByPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StudentDAO</span> <span class="hljs-variable">studentDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(StudentDAO.class); <span class="hljs-comment">//sqlSession</span><br>    PageHelper.startPage(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//List&lt;Student&gt; students = studentDAO.listStudents();</span><br>    List&lt;Student&gt; list = studentDAO.listStudentsByGender(<span class="hljs-string">&quot;女&quot;</span>);<br>    PageInfo&lt;Student&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;Student&gt;(list);<br>    <span class="hljs-comment">//pageInfo中就包含了数据及分页信息</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十一、关联映射"><a href="#十一、关联映射" class="headerlink" title="十一、关联映射"></a>十一、关联映射</h2><h4 id="11-1-实体关系"><a href="#11-1-实体关系" class="headerlink" title="11.1 实体关系"></a>11.1 实体关系</h4><blockquote><p>实体——数据实体，实体关系指的就是数据与数据之间的关系</p><p>例如：用户和角色、房屋和楼栋、订单和商品</p></blockquote><p>实体关系分为以下四种：</p><p><strong>一对一关联</strong></p><p>实例：人和身份证、学生和学生证、用户基本信息和详情</p><p>数据表关系：</p><ul><li><p>主键关联（用户表主键 和详情主键相同时，表示是匹配的数据）</p><p><img src="/../imgs/1616550990633.png" alt="1616550990633"></p></li><li><p>唯一外键关联</p><p><img src="/../imgs/1616551159843.png" alt="1616551159843"></p></li></ul><p><strong>一对多关联</strong>、<strong>多对一关联</strong></p><p>实例：</p><ul><li>一对多： 班级和学生 、 类别和商品、楼栋和房屋</li><li>多对一：学生和班级 、  商品和类别</li></ul><p>数据表关系：</p><ul><li>在多的一端添加外键和一的一段进行关联</li></ul><p><strong>多对多关联</strong></p><p>实例：用户和角色、角色和权限、房屋和业主、学生和社团、订单和商品</p><p>数据表关系：建立第三张关系表添加两个外键分别与两张表主键进行关联</p><p>用户(user_id)           用户角色表(uid,rid)      角色(role_id)</p><h4 id="11-2-创建项目，部署MyBatis框架"><a href="#11-2-创建项目，部署MyBatis框架" class="headerlink" title="11.2 创建项目，部署MyBatis框架"></a>11.2 创建项目，部署MyBatis框架</h4><ul><li><p>创建web项目（maven）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加web依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>部署MyBatis框架</p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置文件</li><li>帮助类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;SqlSession&gt;();<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlSessionFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isAutoCommit)</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> local.get();<br>        <span class="hljs-keyword">if</span>(sqlSession == <span class="hljs-literal">null</span>)&#123;<br>            sqlSession = factory.openSession(isAutoCommit);<br>            local.set(sqlSession);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getSqlSession(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Object</span>&gt;T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; c)</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> getSqlSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> sqlSession.getMapper(c);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="11-3-一对一关联"><a href="#11-3-一对一关联" class="headerlink" title="11.3 一对一关联"></a>11.3 一对一关联</h4><blockquote><p>实例：用户—详情</p></blockquote><h6 id="11-3-1-创建数据表"><a href="#11-3-1-创建数据表" class="headerlink" title="11.3.1 创建数据表"></a>11.3.1 创建数据表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户信息表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>    user_id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span>,<br>    user_pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    user_realname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    user_img <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><br><span class="hljs-comment">-- 用户详情表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> details(<br>detail_id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    user_addr <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    user_tel <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    user_desc <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>uid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span><br>    <span class="hljs-comment">-- constraint FK_USER foreign key(uid) references users(user_id)</span><br>);<br></code></pre></td></tr></table></figure><h6 id="11-3-2-创建实体类"><a href="#11-3-2-创建实体类" class="headerlink" title="11.3.2 创建实体类"></a>11.3.2 创建实体类</h6><ul><li><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> userId;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String userPwd;<br>    <span class="hljs-keyword">private</span> String userRealname;<br>    <span class="hljs-keyword">private</span> String userImg;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Detail</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Detail</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> detailId;<br>    <span class="hljs-keyword">private</span> String userAddr;<br>    <span class="hljs-keyword">private</span> String userTel;<br>    <span class="hljs-keyword">private</span> String userDesc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> userId;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="11-3-3-添加操作（事务）"><a href="#11-3-3-添加操作（事务）" class="headerlink" title="11.3.3 添加操作（事务）"></a>11.3.3 添加操作（事务）</h6><table><thead><tr><th>测试代码</th></tr></thead><tbody><tr><td><img src="/../imgs/1616558872585.png" alt="1616558872585"></td></tr></tbody></table><h6 id="11-3-4-一对一关联查询"><a href="#11-3-4-一对一关联查询" class="headerlink" title="11.3.4 一对一关联查询"></a>11.3.4 一对一关联查询</h6><blockquote><p>在查询用户的同时关联查询出与之对应的详情</p></blockquote><p><strong>实体</strong></p><table><thead><tr><th>User</th><th>Detail</th></tr></thead><tbody><tr><td><img src="/../imgs/1616557527886.png" alt="1616557527886"></td><td><img src="/../imgs/1616557509389.png" alt="1616557509389"></td></tr></tbody></table><p><strong>映射文件</strong></p><table><thead><tr><th>连接查询</th></tr></thead><tbody><tr><td><img src="/../imgs/1616558061073.png" alt="1616558061073"></td></tr></tbody></table><table><thead><tr><th>子查询</th></tr></thead><tbody><tr><td><img src="/../imgs/1616558696902.png" alt="1616558696902"></td></tr><tr><td><img src="/../imgs/1616558739190.png" alt="1616558739190"></td></tr></tbody></table><h4 id="11-4-一对多关联"><a href="#11-4-一对多关联" class="headerlink" title="11.4 一对多关联"></a>11.4 一对多关联</h4><blockquote><p>案例：班级(1)—学生(n)</p></blockquote><h6 id="11-4-1-创建数据表"><a href="#11-4-1-创建数据表" class="headerlink" title="11.4.1 创建数据表"></a>11.4.1 创建数据表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建班级信息表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> classes(<br>    cid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    cname <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span>,<br>    cdesc <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br><br><span class="hljs-comment">-- 创建学生信息表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> students(<br>    sid <span class="hljs-type">char</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">primary</span> key,<br>    sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    sage <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    scid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><h6 id="11-4-2-创建实体类"><a href="#11-4-2-创建实体类" class="headerlink" title="11.4.2 创建实体类"></a>11.4.2 创建实体类</h6><table><thead><tr><th>Clazz</th><th>Student</th></tr></thead><tbody><tr><td><img src="/../imgs/1616566868757.png" alt="1616566868757"></td><td><img src="/../imgs/1616566709567.png" alt="1616566709567"></td></tr></tbody></table><h6 id="11-4-3-关联查询"><a href="#11-4-3-关联查询" class="headerlink" title="11.4.3 关联查询"></a>11.4.3 关联查询</h6><blockquote><p>当查询一个班级的时候， 要关联查询出这个班级下的所有学生</p></blockquote><p><strong>连接查询</strong></p><table><thead><tr><th>连接查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616567949549.png" alt="1616567949549"></td></tr></tbody></table><p><strong>子查询</strong></p><table><thead><tr><th>子查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616568410749.png" alt="1616568410749"></td></tr><tr><td><img src="/../imgs/1616568443022.png" alt="1616568443022"></td></tr></tbody></table><h4 id="11-5-多对一关联"><a href="#11-5-多对一关联" class="headerlink" title="11.5 多对一关联"></a>11.5 多对一关联</h4><blockquote><p>实例：学生(n)—班级(1)</p><p>当查询一个学生的时候，关联查询这个学生所在的班级信息</p></blockquote><h6 id="11-5-1-创建实体类"><a href="#11-5-1-创建实体类" class="headerlink" title="11.5.1 创建实体类"></a>11.5.1 创建实体类</h6><table><thead><tr><th>Student</th><th>Clazz</th></tr></thead><tbody><tr><td><img src="/../imgs/1616568763050.png" alt="1616568763050"></td><td><img src="/../imgs/1616568809974.png" alt="1616568809974"></td></tr></tbody></table><h6 id="11-5-2-关联查询"><a href="#11-5-2-关联查询" class="headerlink" title="11.5.2 关联查询"></a>11.5.2 关联查询</h6><p><strong>连接查询</strong></p><table><thead><tr><th>连接查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616569488794.png" alt="1616569488794"></td></tr></tbody></table><p><strong>子查询</strong></p><table><thead><tr><th>子查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616569897430.png" alt="1616569897430"></td></tr><tr><td><img src="/../imgs/1616569932235.png" alt="1616569932235"></td></tr></tbody></table><h4 id="11-6-多对多关联"><a href="#11-6-多对多关联" class="headerlink" title="11.6 多对多关联"></a>11.6 多对多关联</h4><blockquote><p>案例：学生（m）—课程（n）</p></blockquote><h6 id="11-6-1-创建数据表"><a href="#11-6-1-创建数据表" class="headerlink" title="11.6.1 创建数据表"></a>11.6.1 创建数据表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 学生信息表（如上）</span><br><span class="hljs-comment">-- 课程信息表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> courses(<br>    course_id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    course_name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-comment">-- 选课信息表/成绩表(学号、课程号、成绩)</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> grades(<br>    sid <span class="hljs-type">char</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    cid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    score <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><h6 id="11-6-2-关联查询"><a href="#11-6-2-关联查询" class="headerlink" title="11.6.2 关联查询"></a>11.6.2 关联查询</h6><blockquote><p>查询学生时，同时查询学生选择的课程</p></blockquote><table><thead><tr><th>Student</th><th>Course</th></tr></thead><tbody><tr><td><img src="/../imgs/1616577612042.png" alt="1616577612042"></td><td><img src="/../imgs/1616577631853.png" alt="1616577631853"></td></tr></tbody></table><blockquote><p>根据课程编号查询课程时，同时查询选择了这门课程的学生</p></blockquote><table><thead><tr><th>Student</th><th>Course</th></tr></thead><tbody><tr><td><img src="/../imgs/1616577675018.png" alt="1616577675018"></td><td><img src="/../imgs/1616577785188.png" alt="1616577785188"></td></tr></tbody></table><table><thead><tr><th>连接查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616578573302.png" alt="1616578573302"></td></tr></tbody></table><table><thead><tr><th>子查询映射配置</th></tr></thead><tbody><tr><td><img src="/../imgs/1616579097777.png" alt="1616579097777"></td></tr><tr><td><img src="/../imgs/1616579157655.png" alt="1616579157655"></td></tr></tbody></table><h2 id="十二、动态SQL"><a href="#十二、动态SQL" class="headerlink" title="十二、动态SQL"></a>十二、动态SQL</h2><blockquote><p>交友网：珍爱网、百合网            筛选心仪对象       性别       年龄       城市    身高</p><p>电商：淘宝、京东             筛选商品                        羽毛球拍   品牌     价格</p></blockquote><p>​               方江鹏      性别 女    select * from members where gender&#x3D;’女’</p><p>​               罗彪          性别  女   年龄  18-23       select * from members where gender&#x3D;’女’ and age &gt;&#x3D;18 and age &lt;&#x3D;23</p><p>​               张三          年龄   城市  select * from members where  age &gt;&#x3D;18 and age &lt;&#x3D;23 and city&#x3D;’’</p><blockquote><p>用户的筛选条件不同，我们完成筛选执行的SQL也不一样；我们可以通过穷举来一一的完成不同条件的筛选，但是这种实现思路过于繁琐和复杂，MyBatis就提供了动态SQL的配置方式来实现多条件查询。</p></blockquote><h4 id="12-1-什么是动态SQL？"><a href="#12-1-什么是动态SQL？" class="headerlink" title="12.1 什么是动态SQL？"></a>12.1 什么是动态SQL？</h4><blockquote><p>根据查询条件动态完成SQL的拼接</p></blockquote><h4 id="12-2-动态SQL使用案例"><a href="#12-2-动态SQL使用案例" class="headerlink" title="12.2 动态SQL使用案例"></a>12.2 动态SQL使用案例</h4><blockquote><p>案例：心仪对象搜索</p></blockquote><h6 id="12-2-1-创建数据表"><a href="#12-2-1-创建数据表" class="headerlink" title="12.2.1 创建数据表"></a>12.2.1 创建数据表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> members(<br>    member_id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    member_nick <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span>,<br>    member_gender <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    member_age <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    member_city <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><h6 id="12-2-2-创建实体类"><a href="#12-2-2-创建实体类" class="headerlink" title="12.2.2 创建实体类"></a>12.2.2 创建实体类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> memberId;<br>    <span class="hljs-keyword">private</span> String memberNick;<br>    <span class="hljs-keyword">private</span> String memberGender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> memberAge;<br>    <span class="hljs-keyword">private</span> String memberCity;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="12-2-3-创建DAO接口"><a href="#12-2-3-创建DAO接口" class="headerlink" title="12.2.3 创建DAO接口"></a>12.2.3 创建DAO接口</h6><blockquote><p>在DAO接口中定义一个多条件查询的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberDAO</span> &#123;<br><br>    <span class="hljs-comment">//在多条件查询中，如果查询条件不确定，可以直接使用HashMap作为参数</span><br>    <span class="hljs-comment">//优点：无需单独定义传递查询条件的类</span><br>    <span class="hljs-comment">//缺点：当向Map中存放参数时，key必须与动态sql保持一致（）</span><br>    <span class="hljs-comment">//public List&lt;Member&gt; searchMember(HashMap&lt;String,Object&gt; params);</span><br><br>    <span class="hljs-comment">// 也可以定义专门用于存放查询条件的实体类存放参数</span><br>    <span class="hljs-comment">//优点：设置参数时无需关注属性名</span><br>    <span class="hljs-comment">//缺点：需要单独定义一个类来封装参数</span><br>    <span class="hljs-keyword">public</span> List&lt;Member&gt; <span class="hljs-title function_">searchMember</span><span class="hljs-params">(MemberSearchCondition params)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-3-if"><a href="#12-3-if" class="headerlink" title="12.3 if"></a>12.3 if</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;memberMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Member&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;member_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;memberId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;member_nick&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;memberNick&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;member_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;memberGender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;member_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;memberAge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;member_city&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;memberCity&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchMember&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members<br>    where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--gender 就是参数对象的属性/参数Map的key--&gt;</span><br>        and member_gender=#&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;minAge != null&quot;</span>&gt;</span><br>        and member_age <span class="hljs-symbol">&amp;gt;</span>= #&#123;minAge&#125;   <span class="hljs-comment">&lt;!-- &amp;gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;maxAge != null&quot;</span>&gt;</span><br>        and member_age <span class="hljs-symbol">&amp;lt;</span>= #&#123;maxAge&#125;  <span class="hljs-comment">&lt;!-- &amp;lt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;city != null&quot;</span>&gt;</span><br>        and member_city = #&#123;city&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSearchMember</span><span class="hljs-params">()</span> &#123;<br><br>    HashMap&lt;String,Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    params.put(<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>    params.put(<span class="hljs-string">&quot;minAge&quot;</span>,<span class="hljs-number">18</span>);<br>    <span class="hljs-comment">//params.put(&quot;maxAge&quot;,23);</span><br>    params.put(<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;武汉&quot;</span>);<br><br>    <span class="hljs-comment">//-----------------------------------------------------------------------</span><br>    <span class="hljs-type">MemberSearchCondition</span> <span class="hljs-variable">params2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberSearchCondition</span>();<br>    params2.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>    <span class="hljs-comment">//params2.setMinAge(21);</span><br>    <span class="hljs-comment">//params2.setMaxAge(30);</span><br>    <span class="hljs-comment">//params2.setCity(&quot;武汉&quot;);</span><br><br>    <span class="hljs-comment">//==========================================================================</span><br><br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(MemberDAO.class);<br>    List&lt;Member&gt; members = memberDAO.searchMember(params2);<br><br>    <span class="hljs-keyword">for</span> (Member m: members) &#123;<br>        System.out.println(m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-4-where"><a href="#12-4-where" class="headerlink" title="12.4  where"></a>12.4  where</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchMember&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--gender 就是参数对象的属性/参数Map的key--&gt;</span><br>            and member_gender=#&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;minAge != null&quot;</span>&gt;</span><br>            and member_age <span class="hljs-symbol">&amp;gt;</span>= #&#123;minAge&#125;   <span class="hljs-comment">&lt;!-- &amp;gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;maxAge != null&quot;</span>&gt;</span><br>            and member_age <span class="hljs-symbol">&amp;lt;</span>= #&#123;maxAge&#125;  <span class="hljs-comment">&lt;!-- &amp;lt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;city != null&quot;</span>&gt;</span><br>            and member_city = #&#123;city&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by member_age<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="12-5-trim"><a href="#12-5-trim" class="headerlink" title="12.5 trim"></a>12.5 <strong>trim</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchMember&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and | or&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;order by member_age&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--gender 就是参数对象的属性/参数Map的key--&gt;</span><br>            and member_gender=#&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;minAge != null&quot;</span>&gt;</span><br>            and member_age <span class="hljs-symbol">&amp;gt;</span>= #&#123;minAge&#125;   <span class="hljs-comment">&lt;!-- &amp;gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;maxAge != null&quot;</span>&gt;</span><br>            and member_age <span class="hljs-symbol">&amp;lt;</span>= #&#123;maxAge&#125;  <span class="hljs-comment">&lt;!-- &amp;lt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;city != null&quot;</span>&gt;</span><br>            and member_city = #&#123;city&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="12-6-foreach"><a href="#12-6-foreach" class="headerlink" title="12.6 foreach"></a>12.6 <strong>foreach</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberDAO</span> &#123;<br>    <span class="hljs-comment">//查询指定城市的会员</span><br>    <span class="hljs-keyword">public</span> List&lt;Member&gt; <span class="hljs-title function_">searchMemberByCity</span><span class="hljs-params">(List&lt;String&gt; cities)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchMemberByCity&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members where member_city in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cityName&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;cityName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchMemberByCity</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; cities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    cities.add(<span class="hljs-string">&quot;厦门&quot;</span>);<br>    cities.add(<span class="hljs-string">&quot;宜昌&quot;</span>);<br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(MemberDAO.class);<br>    List&lt;Member&gt; members = memberDAO.searchMemberByCity(cities);<br>    <span class="hljs-keyword">for</span> (Member m: members) &#123;<br>        System.out.println(m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十三、模糊查询"><a href="#十三、模糊查询" class="headerlink" title="十三、模糊查询"></a>十三、模糊查询</h2><blockquote><p>案例：根据昵称查询会员信息（模糊匹配  like）</p></blockquote><h4 id="13-1-模糊查询实现"><a href="#13-1-模糊查询实现" class="headerlink" title="13.1 模糊查询实现"></a>13.1 模糊查询实现</h4><h6 id="13-1-1-DAO"><a href="#13-1-1-DAO" class="headerlink" title="13.1.1 DAO"></a>13.1.1 DAO</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberDAO</span> &#123;<br><br>    <span class="hljs-comment">//根据昵称查询用户信息——模糊查询</span><br>    <span class="hljs-comment">// 模糊查询需要使用$&#123;&#125;取值，与sql进行拼接</span><br>    <span class="hljs-comment">// 在使用$&#123;&#125;时，即使只有一个参数也需要使用@Param注解声明参数的key（非String对象参数可以不用声明）</span><br>    <span class="hljs-keyword">public</span> List&lt;Member&gt; <span class="hljs-title function_">searchMemberByNick</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;keyWord&quot;)</span> String keyWord)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="13-1-2-映射文件"><a href="#13-1-2-映射文件" class="headerlink" title="13.1.2 映射文件"></a>13.1.2 映射文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--如果参数时String类型，需要parameterType声明参数类型--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchMemberByNick&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members<br>    where member_nick like &#x27;%$&#123;keyWord&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="13-1-3-测试"><a href="#13-1-3-测试" class="headerlink" title="13.1.3 测试"></a>13.1.3 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSearchMemberByNick</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(MemberDAO.class);<br>    List&lt;Member&gt; members = memberDAO.searchMemberByNick(<span class="hljs-string">&quot;花&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Member m: members) &#123;<br>        System.out.println(m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-2-和-的区别"><a href="#13-2-和-的区别" class="headerlink" title="13.2 #{}和${}的区别"></a>13.2 #{}和${}的区别</h4><ul><li>${key} 表示获取参数，先获取参数的值拼接到SQL语句中，再编译执行SQL语句;可能引起SQL注入问题  </li><li>#{key} 表示获取参数，先完成SQL编译(预编译)，预编译之后再将获取的参数设置到SQL与中 ，可以避免SQL注入问题</li></ul><h2 id="十四、MyBatis日志配置"><a href="#十四、MyBatis日志配置" class="headerlink" title="十四、MyBatis日志配置"></a>十四、MyBatis日志配置</h2><blockquote><p>MyBatis做为一个封装好的ORM框架，其运行过程我们没办法跟踪，为了让开发者了解MyBatis执行流程及每个执行步骤所完成的工作，MyBatis框架本身支持log4j日志框架，对运行的过程进行跟踪记录。我们只需对MyBatis进行相关的日志配置，就可以看到MyBatis运行过程中的日志信息。</p></blockquote><h4 id="14-1-添加日志框架依赖"><a href="#14-1-添加日志框架依赖" class="headerlink" title="14.1 添加日志框架依赖"></a>14.1 添加日志框架依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="14-2-添加日志配置文件"><a href="#14-2-添加日志配置文件" class="headerlink" title="14.2 添加日志配置文件"></a>14.2 添加日志配置文件</h4><ul><li>在resources目录下创建名为 <code>log4j.properties</code>文件</li><li>在 <code>log4j.properties</code>文件配置日志输出的方式</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 声明日志的输出级别及输出方式</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,stdout</span><br><span class="hljs-comment"># MyBatis logging configuration...</span><br><span class="hljs-attr">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="hljs-string">TRACE</span><br><span class="hljs-comment"># Console output...</span><br><span class="hljs-attr">log4j.appender.stdout</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.stdout.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-comment"># 定义日志的打印格式  %t 表示线程名称  %5p 日志级别 %msg日志信息</span><br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="hljs-string">[%t] %5p - %msg \:%m%n</span><br></code></pre></td></tr></table></figure><h4 id="14-3-日志信息的级别"><a href="#14-3-日志信息的级别" class="headerlink" title="14.3 日志信息的级别"></a>14.3 日志信息的级别</h4><blockquote><p>在使用日志框架输出日志信息的时候，会根据输出的日志信息的重要程度分为5个级别</p></blockquote><table><thead><tr><th>级别</th><th>说明</th></tr></thead><tbody><tr><td>DEBUG</td><td>输出调试信息</td></tr><tr><td>INFO</td><td>输出提示信息</td></tr><tr><td>WARN</td><td>输出警告信息</td></tr><tr><td>ERROR</td><td>一般性错误信息</td></tr><tr><td>FATAL</td><td>致命性错误信息</td></tr></tbody></table><h2 id="十五、配置数据库连接池-整合Druid"><a href="#十五、配置数据库连接池-整合Druid" class="headerlink" title="十五、配置数据库连接池-整合Druid"></a>十五、配置数据库连接池-整合Druid</h2><blockquote><p>MyBatis做为一个ORM框架，在进行数据库操作时是需要和数据库连接连接的，MyBatis支持基于数据库连接池的连接创建方式。</p><p>当我们配置MyBatis数据源时，只要配置了dataSource标签的type属性值为POOLED时，就可以使用MyBatis内置的连接池管理连接。</p><p>如果我们想要使用第三方的数据库连接池，则需进行自定义配置。</p></blockquote><h4 id="15-1-常见的连接池"><a href="#15-1-常见的连接池" class="headerlink" title="15.1 常见的连接池"></a>15.1 常见的连接池</h4><ul><li>DBCP</li><li>C3P0</li><li>Druid 性能也比较好，提供了比较便捷的监控系统</li><li>Hikari 性能最好</li></ul><table><thead><tr><th>功能</th><th>dbcp</th><th>druid</th><th>c3p0</th><th>HikariCP</th></tr></thead><tbody><tr><td>是否支持PSCache</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>监控</td><td>jmx</td><td>jmx&#x2F;log&#x2F;http</td><td>jmx,log</td><td>jmx</td></tr><tr><td>扩展性</td><td>弱</td><td>好</td><td>弱</td><td>弱</td></tr><tr><td>sql拦截及解析</td><td>无</td><td>支持</td><td>无</td><td>无</td></tr><tr><td>代码</td><td>简单</td><td>中等</td><td>复杂</td><td>简单</td></tr><tr><td>更新时间</td><td>2015.8.6</td><td>2015.10.10</td><td>2015.12.09</td><td>2015.12.3</td></tr><tr><td>特点</td><td>依赖于common-pool</td><td>阿里开源，功能全面</td><td>历史久远，代码逻辑复杂，且不易维护</td><td>优化力度大，功能简单，起源于boneCP</td></tr><tr><td>连接池管理</td><td>LinkedBlockingDeque</td><td>数组</td><td></td><td>threadlocal+CopyOnWriteArrayList</td></tr></tbody></table><h4 id="15-2-添加Druid依赖"><a href="#15-2-添加Druid依赖" class="headerlink" title="15.2 添加Druid依赖"></a>15.2 添加Druid依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="15-3-创建Druid连接池工厂"><a href="#15-3-创建Druid连接池工厂" class="headerlink" title="15.3 创建Druid连接池工厂"></a>15.3 创建Druid连接池工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDataSourceFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PooledDataSourceFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DruidDataSourceFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="15-4-将DruidDataSourceFactory配置给MyBatis数据源"><a href="#15-4-将DruidDataSourceFactory配置给MyBatis数据源" class="headerlink" title="15.4 将DruidDataSourceFactory配置给MyBatis数据源"></a>15.4 将DruidDataSourceFactory配置给MyBatis数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--   POOLED 使用MyBatis内置的连接池实现   --&gt;</span><br>        <span class="hljs-comment">&lt;!--  mybatis需要一个连接池工厂，这个工厂可以产生数据库连接池  PooledDataSourceFactory --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.utils.DruidDataSourceFactory&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十六、MyBatis缓存"><a href="#十六、MyBatis缓存" class="headerlink" title="十六、MyBatis缓存"></a>十六、MyBatis缓存</h2><blockquote><p>MyBatis是基于JDBC的封装，使数据库操作更加便捷；MyBatis除了对JDBC操作步骤进行封装之外也对其性能进行了优化：</p><ul><li>在MyBatis引入缓存机制，用于提升MyBatis的检索效率</li><li>在MyBatis引入延迟加载机制，用于减少对数据库不必要的访问</li></ul></blockquote><h4 id="16-1-缓存的工作原理"><a href="#16-1-缓存的工作原理" class="headerlink" title="16.1 缓存的工作原理"></a>16.1 缓存的工作原理</h4><blockquote><p>缓存，就是存储数据的内存</p></blockquote><p><img src="/../imgs/1616654926110.png" alt="1616654926110"></p><h4 id="16-2-MyBatis缓存"><a href="#16-2-MyBatis缓存" class="headerlink" title="16.2 MyBatis缓存"></a>16.2 MyBatis缓存</h4><blockquote><p>MyBatis缓存分为一级缓存和二级缓存</p></blockquote><h6 id="16-2-1-一级缓存"><a href="#16-2-1-一级缓存" class="headerlink" title="16.2.1 一级缓存"></a>16.2.1 一级缓存</h6><blockquote><p>一级缓存也叫做SqlSession级缓存，为每个SqlSession单独分配的缓存内存，无需手动开启可直接使用；多个SqlSession的缓存是不共享的。</p><p>特性：</p><p>1.如果多次查询使用的是同一个SqlSession对象，则第一次查询之后数据会存放到缓存，后续的查询则直接访问缓存中存储的数据；</p><p>2.如果第一次查询完成之后，对查询出的对象进行修改（此修改会影响到缓存），第二次查询会直接访问缓存，造成第二次查询的结果与数据库不一致；</p><p>3.当我们进行在查询时想要跳过缓存直接查询数据库，则可以通过sqlSession.clearCache();来清除当前SqlSession的缓存;</p><p>4.如果第一次查询之后第二查询之前，使用当前的sqlsession执行了修改操作，此修改操作会使第一次查询并缓存的数据失效，因此第二次查询会再次访问数据库。</p></blockquote><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryMemberById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> MyBatisUtil.getSqlSessionFactory().openSession();<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> MyBatisUtil.getSqlSessionFactory().openSession();<br><br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(MemberDAO.class);<br>    <span class="hljs-type">Member</span> <span class="hljs-variable">member1</span> <span class="hljs-operator">=</span> memberDAO1.queryMemberById(<span class="hljs-number">1</span>);<br>    System.out.println(member1);<br><br>    member1.setMemberAge(<span class="hljs-number">99</span>);<br>    sqlSession1.clearCache();<br>    System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>);<br><br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO2</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(MemberDAO.class);<br>    <span class="hljs-type">Member</span> <span class="hljs-variable">member2</span> <span class="hljs-operator">=</span>memberDAO2.queryMemberById(<span class="hljs-number">1</span>);<br>    System.out.println(member2);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="16-2-2-两次查询与数据库数据不一致问题"><a href="#16-2-2-两次查询与数据库数据不一致问题" class="headerlink" title="16.2.2 两次查询与数据库数据不一致问题"></a>16.2.2 两次查询与数据库数据不一致问题</h6><p><img src="/../imgs/1616660132980.png" alt="1616660132980"></p><h6 id="16-2-3-二级缓存"><a href="#16-2-3-二级缓存" class="headerlink" title="16.2.3 二级缓存"></a>16.2.3 二级缓存</h6><blockquote><p>二级缓存也称为SqlSessionFactory级缓存，通过同一个factory对象获取的Sqlsession可以共享二级缓存；在应用服务器中SqlSessionFactory是单例的，因此我们二级缓存可以实现全局共享。</p><p>特性：</p><p>1.二级缓存默认没有开启，需要在mybatis-config.xml中的settings标签开启</p><p>2.二级缓存只能缓存实现序列化接口的对象</p><ol start="3"><li></li></ol></blockquote><ul><li>在mybatis-config.xml开启使用二级缓存</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在需要使用二级缓存的Mapper文件中配置cache标签使用功能二级缓存</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>被缓存的实体类实现序列化接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> memberId;<br>    <span class="hljs-keyword">private</span> String memberNick;<br>    <span class="hljs-keyword">private</span> String memberGender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> memberAge;<br>    <span class="hljs-keyword">private</span> String memberCity;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryMemberById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span>MyBatisUtil.getSqlSessionFactory();<br>    <span class="hljs-comment">// 1.多个SqlSession对象必须来自于同一个SqlSessionFactory</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    System.out.println(sqlSession1 == sqlSession2);<br><br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(MemberDAO.class);<br>    <span class="hljs-type">Member</span> <span class="hljs-variable">member1</span> <span class="hljs-operator">=</span> memberDAO1.queryMemberById(<span class="hljs-number">1</span>);<br>    System.out.println(member1);<br>    sqlSession1.commit();  <br>    <span class="hljs-comment">//2.第一次查询之后执行sqlSession1.commit()，会将当前sqlsession的查询结果缓存到二级缓存</span><br><br>    System.out.println(<span class="hljs-string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>);<br><br>    <span class="hljs-type">MemberDAO</span> <span class="hljs-variable">memberDAO2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(MemberDAO.class);<br>    <span class="hljs-type">Member</span> <span class="hljs-variable">member2</span> <span class="hljs-operator">=</span>memberDAO2.queryMemberById(<span class="hljs-number">1</span>);<br>    System.out.println(member2);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="16-3-查询操作的缓存开关"><a href="#16-3-查询操作的缓存开关" class="headerlink" title="16.3 查询操作的缓存开关"></a>16.3 查询操作的缓存开关</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryMemberById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;memberMap&quot;</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    select member_id,member_nick,member_gender,member_age,member_city<br>    from members<br>    where member_id=#&#123;mid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十七、延迟加载"><a href="#十七、延迟加载" class="headerlink" title="十七、延迟加载"></a>十七、延迟加载</h2><blockquote><p>延迟加载——如果在MyBatis开启了延迟加载，在执行了子查询（至少查询两次及以上）时，默认只执行第一次查询，当用到子查询的查询结果时，才会触发子查询的执行；如果无需使用子查询结果，则子查询不会执行.</p></blockquote><p>开启延迟加载：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;classMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;classId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;className&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cdesc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;classDesc&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stus&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qfedu.dao.StudentDAO.queryStudentsByCid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryClassByCid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;classMap&quot;</span>&gt;</span><br>    select cid,cname,cdesc<br>    from classes<br>    where cid=#&#123;cid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryClassByCid</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-type">ClassDAO</span> <span class="hljs-variable">classDAO</span> <span class="hljs-operator">=</span> MyBatisUtil.getMapper(ClassDAO.class);<br>    <span class="hljs-type">Clazz</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classDAO.queryClassByCid(<span class="hljs-number">1</span>);<br>    System.out.println(clazz.getClassName());<br><br>    System.out.println(<span class="hljs-string">&quot;-----------------------------------&quot;</span>);<br><br>    System.out.println(clazz.getStus());<br>&#125;<br></code></pre></td></tr></table></figure><p>运行日志：</p><p><img src="/../imgs/1616663783657.png" alt="1616663783657"></p><h2 id="练习任务"><a href="#练习任务" class="headerlink" title="练习任务"></a>练习任务</h2><blockquote><p>jsp+servlet+<code>mybatis</code></p></blockquote><p>商品信息的CRUD</p><ul><li>添加商品</li><li>商品列表+分页</li><li>删除商品</li><li>修改商品</li><li>商品详情</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/01/hello-world/"/>
    <url>/2023/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
